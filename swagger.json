{
  "openapi": "3.0.1",
  "info": {
    "title": "CloudTalk API",
    "description": "# Introduction\nWelcome to CloudTalk API reference! Many of these businesses use the CloudTalk API to automate and enhance their customer support with CloudTalk Support. With CloudTalk we are re-building telco industry from the ground and taking it to the next level with first-class customer support system. Please find below the full documenation to CloudTalk.\n\n# API Overview\n\nThe API is organized around the following resources:\n\nAPI Area | Description\n----------------|-------------\nCalls | Browse your call history, download recordings and access all your calls data.\nContacts | Create and update Contacts. Use filters to get lists of Contacts, or access their profiles individually.\nNumbers | Automate Numbers modifications. List all your numbers.\nAgents | Create or update your Agents, access their settings.\nConversation Intelligence | Get Conversation Intelligence data about your calls.\nVoiceAgent | Initiate VoiceAgent calls\n\n\n[JSON](http://www.json.org/) is returned in all responses. XML is not supported.\n\nThe API also uses common approaches for the following:\n\nFunction | Description\n----------------|-------------\nData | API data is JSON encoded with UTF-8. API JSON is either a single object or a list of objects.\nErrors | 4xx and 5xx responses returning JSON with error codes\nRate Limiting | Controls how many requests can be made in a time window\nHTTP | Methods are used in accordance with HTTP (GET POST and DELETE are the primary methods used) and resources are identified using URIs. All API requests are sent over HTTPS.\n\n\n## Authentication\n\nThis is an HTTPS-only API. Authentication is based on API Access Key ID and Access Key Secret. The API Access Key ID and Access Key Secret is passed via HTTP Basic Authentication.\n\n Basic Auth credentials are used to determine on which project should this request be executed on. List of all Basic Auth credentials for the project can be found by Administrators in the Cloudtalk Dashboard Account → Settings → API keys tab.\n\nTo try the API via curl on the command-line, the general form used would be:\n```\ncurl -u ACCESS_KEY_ID:ACCESS_KEY_SECRET API_URL\n```\n\nFor instance, you would execute:\n```\ncurl -u ABCDEFGHIJTESTKEY1:X05Dg4c331c3h61An https://my.cloudtalk.io/api/calls/index.json\n```\n\n## Usage\n\nThe API may rate limit submission of requests for your application. Such limits are managed as an allowed number of operations per time window, where an operation might be read or an update. In that case a **'429 Too Many Requests'** response code will be returned along with the following headers -\n\nHeader name | Description\n----------------|-------------\nX-CloudTalkAPI-Limit | Maximum number of API requests allowed in the current time window.\nX-CloudTalkAPI-Remaining | Number of API requests left in the current window.\nX-CloudTalkAPI-ResetTime | Time when rate limit window will be reset as a Unix timestamp.\n\nNote that the default rate limit is **60 operations per minute per company**. If you need to make more requests, please contact our support with detailed explanation of your use case.\n\n## Response Envelopes\n\n**Note:** Conversation Intelligence doesn't follow envelopes.\n\nThe API returns one of three envelopes depending upon the request issued:\n\n1. Single Item Envelope\n2. Collections Envelope\n3. Error Envelope\n\n### Single Item Envelope\n\nAll dates/times are returned in ISO8601 format and in UTC timezone.\n\n```\nStatus: 200 OK\n{\n    \"responseData\": {\n        \"id\": 123,\n        ...\n        \"created\": \"2018-01-10 12:34:56\"\n    }\n}\n```\n\n### Collections Envelope\n\nAll dates/times are returned in ISO8601 format and in UTC timezone.\n\n```\nStatus: 200 OK\n{\n    \"responseData\": {\n        \"itemsCount\": 65,\n        \"pageCount\": 3,\n        \"pageNumber\": 1,\n        \"limit\": 30,\n        \"data\": [\n            {\n                \"id\": 123,\n                ...\n                \"created\": \"2018-01-10 12:34:56\"\n            },\n            {\n                \"id\": 456,\n                ...\n                \"created\": \"2017-10-19 09:21:29\"\n            },\n            ...\n        ]\n    }\n}\n```\n\n### Error Envelope\n\n```\nStatus: 404 Not Found\n{\n    \"responseData\": {\n        \"status\": 404,\n        \"message\": \"Not Found\"\n    }\n}\n```\n\n## Encoding\n\nData is encoded as defined by JSON in [RFC4627](http://www.ietf.org/rfc/rfc4627.txt). The default encoding for APIs is UTF-8.\n\nSome query parameters may need to be [url encoded](https://www.wikiwand.com/en/Percent-encoding) when sending - for example, the email parameter value used to query users should be encoded.\n\n## Use of HTTP\n\nRequest methods are used in accordance with HTTP -\n\n- `GET` is used to access resources and perform queries. The API does not allow modifications (creates, updates, deletes) to occur via GET.\n- `PUT` is used to create resources.\n- `POST` is used to update resources. PATCH is not currently used by the API.\n- `DELETE` is used to delete resources.\n\nResponses use standard HTTP codes. Where there are client or server errors, a list of of one or more errors in JSON format is returned in the body.\n\nThe `Accept` header must be used by a client used to indicate a preferred response for `GET/HEAD` requests. Requests without an `Accept` header of `application/json` may be rejected with a client error of 404 or 406. The `Content-Type` header should be used by clients to indicate the submitted format for `POST/PUT` requests.",
    "contact": {
      "name": "CloudTalk API Support",
      "url": "https://www.cloudtalk.io/contact"
    },
    "version": "1.7",
    "x-logo": {
      "url": "https://my.cloudtalk.io/img/logo-cloudtalk-color.png"
    }
  },
  "servers": [
    {
      "url": "https://my.cloudtalk.io/api"
    }
  ],
  "tags": [
    {
      "name": "Calls",
      "description": "All data you can get about your calls."
    },
    {
      "name": "Contacts",
      "description": "All data you can get about your contacts."
    },
    {
      "name": "Agents",
      "description": "All data you can get about your agents."
    },
    {
      "name": "Numbers",
      "description": "All data you can get about your numbers."
    },
    {
      "name": "Sms",
      "description": "Sms handling."
    },
    {
      "name": "Tags",
      "description": "All data you can get about your tags."
    },
    {
      "name": "Campaigns",
      "description": "All data you can get about your campaigns."
    },
    {
      "name": "Bulks",
      "description": "Bulk actions."
    },
    {
      "name": "CueCard",
      "description": "CueCards API ver. 1.0.2"
    },
    {
      "name": "Other",
      "description": "All other helper endpoints."
    },
    {
      "name": "Conversation Intelligence",
      "description": "Conversation Intelligence data about your calls."
    },
    {
      "name": "VoiceAgent",
      "description": "VoiceAgent API ver. 1.0.0"
    }
  ],
  "paths": {
    "/cuecards": {
      "post": {
        "servers": [
          {
            "url": "https://platform-api.cloudtalk.io/api/"
          }
        ],
        "summary": "Create CueCard request to be displayed to agent during the active call",
        "operationId": "postCueCard",
        "tags": [
          "CueCard"
        ],
        "requestBody": {
          "description": "Cue Card request definition",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CueCardRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "CueCard request processed correctly",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                },
                "example": {
                  "success": true
                }
              }
            }
          },
          "400": {
            "description": "Request body not matching definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CueCardError"
                },
                "example": {
                  "success": false,
                  "errors": [
                    "field validation for 'CallUUID' failed (required)"
                  ]
                }
              }
            }
          },
          "424": {
            "description": "No active call matching call id was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CueCardError"
                },
                "example": {
                  "success": false,
                  "errors": [
                    "no such active call - call_uuid: aa-bb-cc"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CueCardError"
                },
                "example": {
                  "success": false,
                  "errors": [
                    "error processing cue card"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/agents/index.json": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "List agents",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Filter by agent ID",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max. number of items in response data.",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Number of page to return.",
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "associated_number",
            "in": "query",
            "description": "Filters agents by their assigned number. Please enter a valid  number in e164 format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Agents data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "itemsCount": {
                      "$ref": "#/components/schemas/PaginationData/properties/itemsCount"
                    },
                    "pageCount": {
                      "$ref": "#/components/schemas/PaginationData/properties/pageCount"
                    },
                    "pageNumber": {
                      "$ref": "#/components/schemas/PaginationData/properties/pageNumber"
                    },
                    "limit": {
                      "$ref": "#/components/schemas/PaginationData/properties/limit"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "Agent": {
                            "$ref": "#/components/schemas/Agent"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "itemsCount": 3,
                    "pageCount": 1,
                    "pageNumber": 1,
                    "limit": 3,
                    "data": [
                      {
                        "Agent": {
                          "id": "99",
                          "name": "123456",
                          "firstname": "John",
                          "lastname": "Doe",
                          "email": "joh.doe@phoonio.com",
                          "is_daily_limit_ok": true,
                          "status_outbound": true,
                          "availability_status": "online",
                          "extension": "1001",
                          "call_number_id": 36,
                          "default_number": "+421123456789",
                          "associated_numbers": [
                            "+421123456789",
                            "+421987654321"
                          ]
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/agents/add.json": {
      "put": {
        "tags": [
          "Agents"
        ],
        "summary": "Add an agent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "email",
                  "firstname",
                  "lastname",
                  "pass"
                ],
                "type": "object",
                "properties": {
                  "firstname": {
                    "$ref": "#/components/schemas/Agent/properties/firstname"
                  },
                  "lastname": {
                    "$ref": "#/components/schemas/Agent/properties/lastname"
                  },
                  "email": {
                    "$ref": "#/components/schemas/Agent/properties/email"
                  },
                  "pass": {
                    "$ref": "#/components/schemas/Agent/properties/pass"
                  },
                  "status_outbound": {
                    "$ref": "#/components/schemas/Agent/properties/status_outbound"
                  },
                  "daily_price_limit": {
                    "$ref": "#/components/schemas/Agent/properties/daily_price_limit"
                  },
                  "extension": {
                    "$ref": "#/components/schemas/Agent/properties/extension"
                  },
                  "call_number_id": {
                    "$ref": "#/components/schemas/Agent/properties/call_number_id"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "No error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/StatusCode/properties/status"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "$ref": "#/components/schemas/Agent/properties/id"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "status": 201,
                    "data": {
                      "id": "12345"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Max. number of agents reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 403,
                    "message": "Max. number of agents reached."
                  }
                }
              }
            }
          },
          "406": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInvalidData"
                },
                "example": {
                  "responseData": {
                    "status": 406,
                    "message": "Invalid input data.",
                    "data": {
                      "email": [
                        "Please supply a valid email address."
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 500,
                    "message": "Something went wrong."
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/agents/edit/{agentId}.json": {
      "post": {
        "tags": [
          "Agents"
        ],
        "summary": "Edit an agent",
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "description": "Agent ID to edit",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "email",
                  "firstname",
                  "lastname"
                ],
                "type": "object",
                "properties": {
                  "firstname": {
                    "$ref": "#/components/schemas/Agent/properties/firstname"
                  },
                  "lastname": {
                    "$ref": "#/components/schemas/Agent/properties/lastname"
                  },
                  "email": {
                    "$ref": "#/components/schemas/Agent/properties/email"
                  },
                  "status_outbound": {
                    "$ref": "#/components/schemas/Agent/properties/status_outbound"
                  },
                  "daily_price_limit": {
                    "$ref": "#/components/schemas/Agent/properties/daily_price_limit"
                  },
                  "call_number_id": {
                    "$ref": "#/components/schemas/Agent/properties/call_number_id"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "No error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/StatusCode/properties/status"
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "status": 200
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 404,
                    "message": "Not found."
                  }
                }
              }
            }
          },
          "406": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInvalidData"
                },
                "example": {
                  "responseData": {
                    "status": 406,
                    "message": "Invalid input data.",
                    "data": {
                      "email": [
                        "Please supply a valid email address."
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 500,
                    "message": "Something went wrong."
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/agents/delete/{agentId}.json": {
      "delete": {
        "tags": [
          "Agents"
        ],
        "summary": "Delete an agent",
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "description": "Agent ID to delete",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGeneralData"
                },
                "example": {
                  "responseData": {
                    "status": 200
                  }
                }
              }
            }
          },
          "404": {
            "description": "Agent not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 404,
                    "message": "Not found."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/groups/index.json": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "List groups",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Max. number of items in response data.",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Number of page to return.",
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Groups data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "itemsCount": {
                      "$ref": "#/components/schemas/PaginationData/properties/itemsCount"
                    },
                    "pageCount": {
                      "$ref": "#/components/schemas/PaginationData/properties/pageCount"
                    },
                    "pageNumber": {
                      "$ref": "#/components/schemas/PaginationData/properties/pageNumber"
                    },
                    "limit": {
                      "$ref": "#/components/schemas/PaginationData/properties/limit"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "Groups": {
                            "$ref": "#/components/schemas/Group"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "itemsCount": 9,
                    "pageCount": 1,
                    "pageNumber": 1,
                    "limit": 9,
                    "data": [
                      {
                        "Group": {
                          "id": "568",
                          "internal_name": "Operátori"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/groups/add.json": {
      "put": {
        "tags": [
          "Groups"
        ],
        "summary": "Add an agent to a group",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "group_id",
                  "agent_id"
                ],
                "type": "object",
                "properties": {
                  "group_id": {
                    "$ref": "#/components/schemas/Groups/properties/group_id"
                  },
                  "agent_id": {
                    "$ref": "#/components/schemas/Groups/properties/agent_id"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "No error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/StatusCode/properties/status"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "$ref": "#/components/schemas/Agent/properties/id"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "status": 200,
                    "data": {
                      "message": "Agent added successfully."
                    }
                  }
                }
              }
            }
          },
          "406": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInvalidData"
                },
                "example": {
                  "responseData": {
                    "status": 406,
                    "message": "Invalid input data."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 500,
                    "message": "Something went wrong."
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/groups/delete/{agent_id}.json": {
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Delete an agent",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "description": "Agent ID to delete",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "group_id"
                ],
                "type": "object",
                "properties": {
                  "group_id": {
                    "$ref": "#/components/schemas/Groups/properties/group_id"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "No error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/StatusCode/properties/status"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "$ref": "#/components/schemas/Agent/properties/id"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "status": 200,
                    "data": {
                      "message": "Agent deleted successfully."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Group not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 404,
                    "message": "Not found."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 500,
                    "message": "Something went wrong."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bulk/contacts.json": {
      "post": {
        "tags": [
          "Bulks"
        ],
        "summary": "Contact actions",
        "description": "Max 10 actions are available in one request. Only sent parameters/values will be updated. If you want to clear the value, just set empty string for that attribute. After sending empty string for properties of `ContactNumber`, `ContactEmail`, `ContactsTag` or `ContactAttribute` all data from these properties will be cleared. When you send values for properties of `ContactNumber`, `ContactEmail`, `ContactsTag` or `ContactAttribute` only these data will be updated, all other will be cleared.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "maxItems": 10,
                "example": [
                  {
                    "action": "add_contact",
                    "command_id": "123",
                    "data": {
                      "name": "John Snow",
                      "title": "Ing.",
                      "company": "Night watch",
                      "industry": "it",
                      "website": "https://www.castleblack.com/",
                      "address": "Room 1",
                      "city": "New York",
                      "zip": "18104",
                      "state": "NY",
                      "country_id": 201,
                      "ContactNumber": [
                        {
                          "public_number": 421901123456
                        }
                      ],
                      "ContactEmail": [
                        {
                          "email": "snow@example.com"
                        }
                      ],
                      "ContactsTag": [
                        {
                          "name": "watch"
                        }
                      ]
                    }
                  },
                  {
                    "action": "delete_contact",
                    "command_id": "1234",
                    "data": {
                      "id": 1234
                    }
                  },
                  {
                    "action": "edit_contact",
                    "command_id": "12345",
                    "data": {
                      "id": 123,
                      "name": "Daenerys Stormborn",
                      "title": "Ing.",
                      "company": "Targaryen inc.",
                      "industry": "it",
                      "website": "https://www.fireandblood.com/",
                      "address": "First st.",
                      "zip": "18104",
                      "state": "NY",
                      "country_id": 201,
                      "ContactNumber": [
                        {
                          "public_number": 421901123456
                        },
                        {
                          "public_number": 421908123456
                        }
                      ],
                      "ContactEmail": [
                        {
                          "email": "danny@example.com"
                        },
                        {
                          "email": "targ@example.com"
                        }
                      ],
                      "ContactsTag": [
                        {
                          "name": "fire"
                        },
                        {
                          "name": "dragons"
                        }
                      ]
                    }
                  },
                  {
                    "action": "add_activity",
                    "command_id": "123456",
                    "data": {
                      "contact_id": 123,
                      "type": "order",
                      "name": "Burn the usurper",
                      "activity_date": "2020-08-22T09:53:47.000Z",
                      "description": "Defeat the forces at kings landing",
                      "activity_author": "Danny Stormborn",
                      "external_id": 123456,
                      "external_url": "https://fireandblood.io/order"
                    }
                  },
                  {
                    "action": "delete_activity",
                    "command_id": "1234567",
                    "data": {
                      "id": 12345
                    }
                  },
                  {
                    "action": "edit_activity",
                    "command_id": "12345678",
                    "data": {
                      "id": 123456,
                      "contact_id": 123456,
                      "type": "order",
                      "name": "Defend the Wall",
                      "activity_date": "2020-08-25T09:53:47.000Z",
                      "description": "Repel white walkers attack",
                      "activity_author": "Danny Stormborn",
                      "external_id": 1234567,
                      "external_url": "https://fireandblood.com/defend"
                    }
                  },
                  {
                    "action": "add_note",
                    "command_id": "123456789",
                    "data": {
                      "contact_id": 1234,
                      "note": "Dont feed the dragon",
                      "user_id": 12345678
                    }
                  },
                  {
                    "action": "delete_note",
                    "command_id": "1234567890",
                    "data": {
                      "id": 1234567890
                    }
                  },
                  {
                    "action": "edit_note",
                    "command_id": "1234567890A",
                    "data": {
                      "id": 123456789,
                      "note": "Seriously, dont",
                      "user_id": 1075,
                      "contact_id": 1234
                    }
                  }
                ],
                "items": {
                  "required": [
                    "action",
                    "command_id",
                    "data"
                  ],
                  "type": "object",
                  "properties": {
                    "action": {
                      "type": "string",
                      "description": "Action",
                      "enum": [
                        "add_contact",
                        "edit_contact",
                        "delete_contact",
                        "add_activity",
                        "edit_activity",
                        "delete_activity",
                        "add_note",
                        "edit_note",
                        "delete_note"
                      ]
                    },
                    "command_id": {
                      "$ref": "#/components/schemas/command_id"
                    },
                    "data": {
                      "oneOf": [
                        {
                          "title": "add contact",
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Name. Only for actions add_contact, edit_contact, add_activity, edit_activity."
                            },
                            "title": {
                              "type": "string",
                              "description": "Title. Only for actions add_contact, edit_contact."
                            },
                            "company": {
                              "type": "string",
                              "description": "Company. Only for actions add_contact, edit_contact."
                            },
                            "industry": {
                              "type": "string",
                              "description": "Industry. Only for actions add_contact, edit_contact."
                            },
                            "website": {
                              "type": "string",
                              "description": "Website. Only for actions add_contact, edit_contact."
                            },
                            "address": {
                              "type": "string",
                              "description": "Address. Only for actions add_contact, edit_contact."
                            },
                            "city": {
                              "type": "string",
                              "description": "City. Only for actions add_contact, edit_contact."
                            },
                            "zip": {
                              "type": "string",
                              "description": "ZIP. Only for actions add_contact, edit_contact."
                            },
                            "state": {
                              "type": "string",
                              "description": "State. Only for actions add_contact, edit_contact."
                            },
                            "country_id": {
                              "type": "integer",
                              "description": "Country ID. Only for actions add_contact, edit_contact."
                            },
                            "favorite_agent": {
                              "type": "integer",
                              "description": "Favorite agent. Only for actions add_contact, edit_contact."
                            },
                            "ExternalUrl": {
                              "$ref": "#/components/schemas/ExternalUrlArray"
                            },
                            "ContactNumber": {
                              "$ref": "#/components/schemas/ContactNumberArray"
                            },
                            "ContactEmail": {
                              "$ref": "#/components/schemas/ContactEmailArray"
                            },
                            "ContactsTag": {
                              "$ref": "#/components/schemas/ContactsTag"
                            },
                            "ContactAttribute": {
                              "type": "array",
                              "description": "Attributes for contact. Only for actions add_contact, edit_contact.",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "attribute_id": {
                                    "$ref": "#/components/schemas/ContactAttribute/items/properties/attribute_id"
                                  },
                                  "value": {
                                    "$ref": "#/components/schemas/ContactAttribute/items/properties/value"
                                  }
                                }
                              }
                            }
                          }
                        },
                        {
                          "title": "delete contact/note/activity",
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "description": "ID. Only for actions edit_contact, delete_contact, edit_activity, delete_activity, edit_note, delete_note."
                            }
                          }
                        },
                        {
                          "title": "edit contact",
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "description": "ID. Only for actions edit_contact, delete_contact, edit_activity, delete_activity, edit_note, delete_note."
                            },
                            "name": {
                              "type": "string",
                              "description": "Name. Only for actions add_contact, edit_contact, add_activity, edit_activity."
                            },
                            "title": {
                              "type": "string",
                              "description": "Title. Only for actions add_contact, edit_contact."
                            },
                            "company": {
                              "type": "string",
                              "description": "Company. Only for actions add_contact, edit_contact."
                            },
                            "industry": {
                              "type": "string",
                              "description": "Industry. Only for actions add_contact, edit_contact."
                            },
                            "website": {
                              "type": "string",
                              "description": "Website. Only for actions add_contact, edit_contact."
                            },
                            "address": {
                              "type": "string",
                              "description": "Address. Only for actions add_contact, edit_contact."
                            },
                            "city": {
                              "type": "string",
                              "description": "City. Only for actions add_contact, edit_contact."
                            },
                            "zip": {
                              "type": "string",
                              "description": "ZIP. Only for actions add_contact, edit_contact."
                            },
                            "state": {
                              "type": "string",
                              "description": "State. Only for actions add_contact, edit_contact."
                            },
                            "country_id": {
                              "type": "integer",
                              "description": "Country ID. Only for actions add_contact, edit_contact."
                            },
                            "favorite_agent": {
                              "type": "integer",
                              "description": "Favorite agent. Only for actions add_contact, edit_contact."
                            },
                            "ExternalUrl": {
                              "$ref": "#/components/schemas/ExternalUrlArray"
                            },
                            "ContactNumber": {
                              "$ref": "#/components/schemas/ContactNumberArray"
                            },
                            "ContactEmail": {
                              "$ref": "#/components/schemas/ContactEmailArray"
                            },
                            "ContactsTag": {
                              "$ref": "#/components/schemas/ContactsTag"
                            },
                            "ContactAttribute": {
                              "type": "array",
                              "description": "Attributes for contact. Only for actions add_contact, edit_contact.",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "attribute_id": {
                                    "$ref": "#/components/schemas/ContactAttribute/items/properties/attribute_id"
                                  },
                                  "value": {
                                    "$ref": "#/components/schemas/ContactAttribute/items/properties/value"
                                  }
                                }
                              }
                            }
                          }
                        },
                        {
                          "title": "add activity",
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Name. Only for actions add_contact, edit_contact, add_activity, edit_activity."
                            },
                            "contact_id": {
                              "type": "integer",
                              "description": "Contact ID. Only for actions add_activity, edit_activity, add_note, edit_note."
                            },
                            "type": {
                              "$ref": "#/components/schemas/ContactActivity/properties/type"
                            },
                            "activity_date": {
                              "$ref": "#/components/schemas/ContactActivity/properties/activity_date"
                            },
                            "description": {
                              "$ref": "#/components/schemas/ContactActivity/properties/description"
                            },
                            "activity_author": {
                              "$ref": "#/components/schemas/ContactActivity/properties/activity_author"
                            },
                            "external_id": {
                              "$ref": "#/components/schemas/ContactActivity/properties/external_id"
                            },
                            "external_url": {
                              "$ref": "#/components/schemas/ContactActivity/properties/external_url"
                            }
                          }
                        },
                        {
                          "title": "edit activity",
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "description": "ID. Only for actions edit_contact, delete_contact, edit_activity, delete_activity, edit_note, delete_note."
                            },
                            "name": {
                              "type": "string",
                              "description": "Name. Only for actions add_contact, edit_contact, add_activity, edit_activity."
                            },
                            "contact_id": {
                              "type": "integer",
                              "description": "Contact ID. Only for actions add_activity, edit_activity, add_note, edit_note."
                            },
                            "type": {
                              "$ref": "#/components/schemas/ContactActivity/properties/type"
                            },
                            "activity_date": {
                              "$ref": "#/components/schemas/ContactActivity/properties/activity_date"
                            },
                            "description": {
                              "$ref": "#/components/schemas/ContactActivity/properties/description"
                            },
                            "activity_author": {
                              "$ref": "#/components/schemas/ContactActivity/properties/activity_author"
                            },
                            "external_id": {
                              "$ref": "#/components/schemas/ContactActivity/properties/external_id"
                            },
                            "external_url": {
                              "$ref": "#/components/schemas/ContactActivity/properties/external_url"
                            }
                          }
                        },
                        {
                          "title": "add note",
                          "type": "object",
                          "properties": {
                            "contact_id": {
                              "type": "integer",
                              "description": "Contact ID. Only for actions add_activity, edit_activity, add_note, edit_note."
                            },
                            "user_id": {
                              "$ref": "#/components/schemas/ContactNote/properties/user_id"
                            },
                            "note": {
                              "$ref": "#/components/schemas/ContactNote/properties/note"
                            }
                          }
                        },
                        {
                          "title": "edit note",
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "description": "ID. Only for actions edit_contact, delete_contact, edit_activity, delete_activity, edit_note, delete_note."
                            },
                            "contact_id": {
                              "type": "integer",
                              "description": "Contact ID. Only for actions add_activity, edit_activity, add_note, edit_note."
                            },
                            "user_id": {
                              "$ref": "#/components/schemas/ContactNote/properties/user_id"
                            },
                            "note": {
                              "$ref": "#/components/schemas/ContactNote/properties/note"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "No error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "responseData": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "$ref": "#/components/schemas/StatusCode/properties/status"
                        },
                        "data": {
                          "$ref": "#/components/schemas/ContactsBulkDataResponse"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "status": 200,
                    "data": [
                      {
                        "command_id": "123",
                        "status": 201,
                        "data": {
                          "id": "123"
                        }
                      },
                      {
                        "command_id": "1234",
                        "status": 200
                      },
                      {
                        "command_id": "12345",
                        "status": 200
                      },
                      {
                        "command_id": "123456",
                        "status": 201,
                        "data": {
                          "id": "123456"
                        }
                      },
                      {
                        "command_id": "1234567",
                        "status": 200
                      },
                      {
                        "command_id": "12345678",
                        "status": 200
                      },
                      {
                        "command_id": "12356789",
                        "status": 201,
                        "data": {
                          "id": "123456789"
                        }
                      },
                      {
                        "command_id": "1234567890",
                        "status": 200
                      },
                      {
                        "command_id": "123456789A",
                        "status": 200
                      }
                    ]
                  }
                }
              }
            }
          },
          "406": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInvalidData"
                },
                "example": {
                  "responseData": {
                    "status": 406,
                    "message": "Invalid input data.",
                    "data": {
                      "email": [
                        "Please supply a valid email address."
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 500,
                    "message": "Something went wrong."
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/campaigns/index.json": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "summary": "List campaigns",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Filter by campaign ID",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max. number of items in response data.",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Number of page to return.",
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contacts data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "itemsCount": {
                      "$ref": "#/components/schemas/PaginationData/properties/itemsCount"
                    },
                    "pageCount": {
                      "$ref": "#/components/schemas/PaginationData/properties/pageCount"
                    },
                    "pageNumber": {
                      "$ref": "#/components/schemas/PaginationData/properties/pageNumber"
                    },
                    "limit": {
                      "$ref": "#/components/schemas/PaginationData/properties/limit"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "Campaign": {
                            "$ref": "#/components/schemas/CampaignList"
                          },
                          "Button": {
                            "$ref": "#/components/schemas/Button"
                          },
                          "Tag": {
                            "$ref": "#/components/schemas/Tag"
                          },
                          "Group": {
                            "$ref": "#/components/schemas/Group"
                          },
                          "Agent": {
                            "$ref": "#/components/schemas/PdAgent"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "itemsCount": 3,
                    "pageCount": 1,
                    "pageNumber": 1,
                    "limit": 3,
                    "data": [
                      {
                        "Campaign": {
                          "id": "63",
                          "name": "Test Dialer",
                          "status": "inactive",
                          "has_schedule_date": false,
                          "answer_wait_time": "45",
                          "after_call_dialing_auto": false,
                          "after_call_time": "5",
                          "is_recording": false,
                          "is_predictive": false,
                          "attempts": "1",
                          "attempts_interval": "18"
                        },
                        "Button": [
                          {
                            "id": "252",
                            "title": "Sale",
                            "type": "successful_positive",
                            "color": "#2980b9",
                            "description": "Sold"
                          }
                        ],
                        "ContactsTag": [
                          {
                            "id": "133",
                            "name": "dialer"
                          }
                        ],
                        "Group": [
                          {
                            "id": "568",
                            "internal_name": "Agents"
                          }
                        ],
                        "Agent": [
                          {
                            "id": "1075",
                            "fullname": "Jane Doe"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/campaigns/add.json": {
      "put": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Add campaign",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Button",
                  "name"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/CampaignList/properties/name"
                  },
                  "status": {
                    "$ref": "#/components/schemas/CampaignList/properties/status"
                  },
                  "has_schedule_date": {
                    "$ref": "#/components/schemas/CampaignList/properties/has_schedule_date"
                  },
                  "schedule_start_date": {
                    "$ref": "#/components/schemas/CampaignList/properties/schedule_start_date"
                  },
                  "schedule_start_time": {
                    "$ref": "#/components/schemas/CampaignList/properties/schedule_start_time"
                  },
                  "answer_wait_time": {
                    "$ref": "#/components/schemas/CampaignList/properties/answer_wait_time"
                  },
                  "after_call_dialing_auto": {
                    "$ref": "#/components/schemas/CampaignList/properties/after_call_dialing_auto"
                  },
                  "after_call_time": {
                    "$ref": "#/components/schemas/CampaignList/properties/after_call_time"
                  },
                  "is_recording": {
                    "$ref": "#/components/schemas/CampaignList/properties/is_recording"
                  },
                  "call_number_id": {
                    "$ref": "#/components/schemas/CampaignList/properties/call_number_id"
                  },
                  "call_script_id": {
                    "$ref": "#/components/schemas/CampaignList/properties/call_script_id"
                  },
                  "survey_id": {
                    "$ref": "#/components/schemas/CampaignList/properties/survey_id"
                  },
                  "is_predictive": {
                    "$ref": "#/components/schemas/CampaignList/properties/is_predictive"
                  },
                  "calls_percentage": {
                    "$ref": "#/components/schemas/CampaignList/properties/calls_percentage"
                  },
                  "attempts": {
                    "$ref": "#/components/schemas/CampaignList/properties/attempts"
                  },
                  "attempts_interval": {
                    "$ref": "#/components/schemas/CampaignList/properties/attempts_interval"
                  },
                  "Button": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "title": {
                          "$ref": "#/components/schemas/Button/properties/title"
                        },
                        "type": {
                          "$ref": "#/components/schemas/Button/properties/type"
                        },
                        "color": {
                          "$ref": "#/components/schemas/Button/properties/color"
                        },
                        "description": {
                          "$ref": "#/components/schemas/Button/properties/description"
                        }
                      }
                    }
                  },
                  "ContactsTag": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Tag ID"
                        }
                      }
                    }
                  },
                  "Agent": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "$ref": "#/components/schemas/Agent/properties/id"
                        }
                      }
                    }
                  },
                  "Group": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "$ref": "#/components/schemas/Group/properties/id"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "No error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/StatusCode/properties/status"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "$ref": "#/components/schemas/CampaignList/properties/id"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "status": 201,
                    "data": {
                      "id": "12345"
                    }
                  }
                }
              }
            }
          },
          "406": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInvalidData"
                },
                "example": {
                  "responseData": {
                    "status": 406,
                    "message": "Invalid input data.",
                    "data": {
                      "name": [
                        "Please supply a valid campaign name."
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 500,
                    "message": "Something went wrong."
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/campaigns/edit/{id}.json": {
      "post": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Edit campaign",
        "description": "Edit a campaign",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Campaign ID to edit",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Button",
                  "name"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/CampaignList/properties/name"
                  },
                  "status": {
                    "$ref": "#/components/schemas/CampaignList/properties/status"
                  },
                  "has_schedule_date": {
                    "$ref": "#/components/schemas/CampaignList/properties/has_schedule_date"
                  },
                  "schedule_start_date": {
                    "$ref": "#/components/schemas/CampaignList/properties/schedule_start_date"
                  },
                  "schedule_start_time": {
                    "$ref": "#/components/schemas/CampaignList/properties/schedule_start_time"
                  },
                  "answer_wait_time": {
                    "$ref": "#/components/schemas/CampaignList/properties/answer_wait_time"
                  },
                  "after_call_dialing_auto": {
                    "$ref": "#/components/schemas/CampaignList/properties/after_call_dialing_auto"
                  },
                  "after_call_time": {
                    "$ref": "#/components/schemas/CampaignList/properties/after_call_time"
                  },
                  "is_recording": {
                    "$ref": "#/components/schemas/CampaignList/properties/is_recording"
                  },
                  "call_number_id": {
                    "$ref": "#/components/schemas/CampaignList/properties/call_number_id"
                  },
                  "call_script_id": {
                    "$ref": "#/components/schemas/CampaignList/properties/call_script_id"
                  },
                  "survey_id": {
                    "$ref": "#/components/schemas/CampaignList/properties/survey_id"
                  },
                  "is_predictive": {
                    "$ref": "#/components/schemas/CampaignList/properties/is_predictive"
                  },
                  "calls_percentage": {
                    "$ref": "#/components/schemas/CampaignList/properties/calls_percentage"
                  },
                  "attempts": {
                    "$ref": "#/components/schemas/CampaignList/properties/attempts"
                  },
                  "attempts_interval": {
                    "$ref": "#/components/schemas/CampaignList/properties/attempts_interval"
                  },
                  "Button": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Button id"
                        },
                        "title": {
                          "$ref": "#/components/schemas/Button/properties/title"
                        },
                        "type": {
                          "$ref": "#/components/schemas/Button/properties/type"
                        },
                        "color": {
                          "$ref": "#/components/schemas/Button/properties/color"
                        },
                        "description": {
                          "$ref": "#/components/schemas/Button/properties/description"
                        }
                      }
                    }
                  },
                  "ContactsTag": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Tag ID"
                        }
                      }
                    }
                  },
                  "Agent": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "$ref": "#/components/schemas/Agent/properties/id"
                        }
                      }
                    }
                  },
                  "Group": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "$ref": "#/components/schemas/Group/properties/id"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "No error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/StatusCode/properties/status"
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "status": 200
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 404,
                    "message": "Not found."
                  }
                }
              }
            }
          },
          "406": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInvalidData"
                },
                "example": {
                  "responseData": {
                    "status": 406,
                    "message": "Invalid input data.",
                    "data": {
                      "name": [
                        "Please supply a valid campaign name."
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 500,
                    "message": "Something went wrong."
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/campaigns/delete/{id}.json": {
      "delete": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Delete campaign",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Campaign ID to delete",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGeneralData"
                },
                "example": {
                  "responseData": {
                    "status": 200
                  }
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 404,
                    "message": "Not found."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 500,
                    "message": "Something went wrong."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contacts/index.json": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "List contacts",
        "parameters": [
          {
            "name": "country_id",
            "in": "query",
            "description": "Filter by country ID",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "tag_id",
            "in": "query",
            "description": "Filter by tag ID",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "industry",
            "in": "query",
            "description": "Filter by industry",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "keyword",
            "in": "query",
            "description": "Filter by keyword",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max. number of items in response data.",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Number of page to return.",
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contacts data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "itemsCount": {
                      "$ref": "#/components/schemas/PaginationData/properties/itemsCount"
                    },
                    "pageCount": {
                      "$ref": "#/components/schemas/PaginationData/properties/pageCount"
                    },
                    "pageNumber": {
                      "$ref": "#/components/schemas/PaginationData/properties/pageNumber"
                    },
                    "limit": {
                      "$ref": "#/components/schemas/PaginationData/properties/limit"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "Contact": {
                            "$ref": "#/components/schemas/ContactList"
                          },
                          "ContactNumber": {
                            "$ref": "#/components/schemas/ContactNumber"
                          },
                          "ContactEmail": {
                            "$ref": "#/components/schemas/ContactEmail"
                          },
                          "ContactAttribute": {
                            "$ref": "#/components/schemas/ContactAttribute"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "itemsCount": 3,
                    "pageCount": 1,
                    "pageNumber": 1,
                    "limit": 3,
                    "data": [
                      {
                        "Contact": {
                          "id": "1234",
                          "name": "John Doe",
                          "company": "Google"
                        },
                        "ContactNumber": {
                          "public_number": 442012345678
                        },
                        "ContactEmail": {
                          "email": "john.doe@gmail.com"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contacts/add.json": {
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Add contact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/Contact/properties/name"
                  },
                  "title": {
                    "$ref": "#/components/schemas/Contact/properties/title"
                  },
                  "company": {
                    "$ref": "#/components/schemas/Contact/properties/company"
                  },
                  "industry": {
                    "$ref": "#/components/schemas/Contact/properties/industry"
                  },
                  "website": {
                    "$ref": "#/components/schemas/Contact/properties/website"
                  },
                  "address": {
                    "$ref": "#/components/schemas/Contact/properties/address"
                  },
                  "city": {
                    "$ref": "#/components/schemas/Contact/properties/city"
                  },
                  "zip": {
                    "$ref": "#/components/schemas/Contact/properties/zip"
                  },
                  "state": {
                    "$ref": "#/components/schemas/Contact/properties/state"
                  },
                  "country_id": {
                    "$ref": "#/components/schemas/Contact/properties/country_id"
                  },
                  "favorite_agent": {
                    "$ref": "#/components/schemas/Contact/properties/favorite_agent"
                  },
                  "ExternalUrl": {
                    "$ref": "#/components/schemas/ExternalUrlArray"
                  },
                  "ContactNumber": {
                    "$ref": "#/components/schemas/ContactNumberArray"
                  },
                  "ContactEmail": {
                    "$ref": "#/components/schemas/ContactEmailArray"
                  },
                  "ContactsTag": {
                    "$ref": "#/components/schemas/ContactsTag"
                  },
                  "ContactAttribute": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "attribute_id": {
                          "$ref": "#/components/schemas/ContactAttribute/items/properties/attribute_id"
                        },
                        "value": {
                          "$ref": "#/components/schemas/ContactAttribute/items/properties/value"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "No error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/StatusCode/properties/status"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "$ref": "#/components/schemas/Contact/properties/id"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "status": 201,
                    "data": {
                      "id": "12345"
                    }
                  }
                }
              }
            }
          },
          "406": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInvalidData"
                },
                "example": {
                  "responseData": {
                    "status": 406,
                    "message": "Invalid input data.",
                    "data": {
                      "email": [
                        "Please supply a valid email address."
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 500,
                    "message": "Something went wrong."
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/contacts/edit/{contactId}.json": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Edit contact",
        "description": "Only sent parameters/values will be updated. If you want to clear the value, just set empty string for that attribute. After sending empty string for properties of `ContactNumber`, `ContactEmail`, `ContactsTag` or `ContactAttribute` all data from these properties will be cleared. When you send values for properties of `ContactNumber`, `ContactEmail`, `ContactsTag` or `ContactAttribute` only these data will be updated, all other will be cleared.",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact ID to edit",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/Contact/properties/name"
                  },
                  "title": {
                    "$ref": "#/components/schemas/Contact/properties/title"
                  },
                  "company": {
                    "$ref": "#/components/schemas/Contact/properties/company"
                  },
                  "industry": {
                    "$ref": "#/components/schemas/Contact/properties/industry"
                  },
                  "website": {
                    "$ref": "#/components/schemas/Contact/properties/website"
                  },
                  "address": {
                    "$ref": "#/components/schemas/Contact/properties/address"
                  },
                  "city": {
                    "$ref": "#/components/schemas/Contact/properties/city"
                  },
                  "zip": {
                    "$ref": "#/components/schemas/Contact/properties/zip"
                  },
                  "state": {
                    "$ref": "#/components/schemas/Contact/properties/state"
                  },
                  "country_id": {
                    "$ref": "#/components/schemas/Contact/properties/country_id"
                  },
                  "favorite_agent": {
                    "$ref": "#/components/schemas/Contact/properties/favorite_agent"
                  },
                  "ExternalUrl": {
                    "$ref": "#/components/schemas/ExternalUrlArray"
                  },
                  "ContactNumber": {
                    "$ref": "#/components/schemas/ContactNumberArray"
                  },
                  "ContactEmail": {
                    "$ref": "#/components/schemas/ContactEmailArray"
                  },
                  "ContactsTag": {
                    "$ref": "#/components/schemas/ContactsTag"
                  },
                  "ContactAttribute": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "attribute_id": {
                          "$ref": "#/components/schemas/ContactAttribute/items/properties/attribute_id"
                        },
                        "value": {
                          "$ref": "#/components/schemas/ContactAttribute/items/properties/value"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "No error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/StatusCode/properties/status"
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "status": 200
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 404,
                    "message": "Not found."
                  }
                }
              }
            }
          },
          "406": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInvalidData"
                },
                "example": {
                  "responseData": {
                    "status": 406,
                    "message": "Invalid input data.",
                    "data": {
                      "email": [
                        "Please supply a valid email address."
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 500,
                    "message": "Something went wrong."
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/contacts/delete/{contactId}.json": {
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Delete contact",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact ID to delete",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGeneralData"
                },
                "example": {
                  "responseData": {
                    "status": 200
                  }
                }
              }
            }
          },
          "404": {
            "description": "Contact not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 404,
                    "message": "Not found."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 500,
                    "message": "Something went wrong."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contacts/show/{contactId}.json": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Inspect a contact",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact ID to show",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contacts data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Contact": {
                      "$ref": "#/components/schemas/Contact"
                    },
                    "ExternalUrl": {
                      "$ref": "#/components/schemas/ExternalUrlArray"
                    },
                    "ContactNumber": {
                      "$ref": "#/components/schemas/ContactNumberArray"
                    },
                    "ContactEmail": {
                      "$ref": "#/components/schemas/ContactEmailArray"
                    },
                    "ContactsTag": {
                      "$ref": "#/components/schemas/ContactsTag"
                    },
                    "ContactAttribute": {
                      "$ref": "#/components/schemas/ContactAttribute"
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "Contact": {
                      "id": "1234",
                      "name": "John Doe",
                      "title": "Dr.",
                      "company": "Google",
                      "industry": "it",
                      "website": "https://www.google.com/",
                      "address": "First st.",
                      "city": "New York",
                      "zip": "11804",
                      "state": "NY",
                      "country_id": "1",
                      "favorite_agent": "123",
                      "created": "2017-11-11T15:25:42.000Z",
                      "modified": "2017-04-26T22:57:50.000Z"
                    },
                    "ExternalUrl": [
                      {
                        "name": "CRM",
                        "url": "https://cloudtalk.io/c/show/123"
                      }
                    ],
                    "ContactEmail": [
                      {
                        "email": "joh.doe@gmail.com"
                      }
                    ],
                    "ContactNumber": [
                      {
                        "public_number": 442012345678
                      }
                    ],
                    "ContactsTag": [
                      {
                        "name": "vipClients"
                      },
                      {
                        "name": "shopify"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Contact not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 404,
                    "message": "Not found."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contacts/attributes.json": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Attributes",
        "description": "List all attributes which can be assigned to a contact.",
        "responses": {
          "200": {
            "description": "All attributes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "responseData": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "ContactAttribute": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "$ref": "#/components/schemas/ContactAttribute/items/properties/attribute_id"
                              },
                              "title": {
                                "$ref": "#/components/schemas/ContactAttribute/items/properties/title"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "responseData": [
                    {
                      "ContactAttribute": {
                        "id": "123",
                        "title": "Salary"
                      }
                    },
                    {
                      "ContactAttribute": {
                        "id": "124",
                        "title": "Custom notes"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/contacts/addTags/{contactId}.json": {
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Assign Tags",
        "description": "Assign tags to contact.",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact ID for adding tags",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "tags"
                ],
                "type": "object",
                "properties": {
                  "tags": {
                    "type": "array",
                    "description": "Array of tag names",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Tags assigned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "Status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "tags": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "Tag ID"
                              },
                              "name": {
                                "type": "string",
                                "description": "Tag name"
                              }
                            }
                          }
                        },
                        "contact_id": {
                          "type": "string",
                          "description": "Contact ID"
                        }
                      },
                      "description": "Data of assigned tags"
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "status": 200,
                    "message": "Tags were sucessfully added.",
                    "data": {
                      "tags": [
                        {
                          "id": "123",
                          "name": "First"
                        },
                        {
                          "id": "456",
                          "name": "Second"
                        },
                        {
                          "id": "789",
                          "name": "Third"
                        }
                      ],
                      "contact_id": "123456"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "Status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "status": 404,
                    "message": "Not found."
                  }
                }
              }
            }
          },
          "406": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "Status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "status": 406,
                    "message": "Invalid input data."
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/contacts/removeTags/{contactId}.json": {
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Unassign Tags",
        "description": "Unassign tags to contact.",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact ID for deleting tags",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "tags"
                ],
                "type": "object",
                "properties": {
                  "tags": {
                    "type": "array",
                    "description": "Array of tag names",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Tags unassigned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "Status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "tags": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "Tag ID"
                              },
                              "name": {
                                "type": "string",
                                "description": "Tag name"
                              }
                            }
                          }
                        },
                        "contact_id": {
                          "type": "string",
                          "description": "Contact ID"
                        }
                      },
                      "description": "Data of unassigned tags"
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "status": 200,
                    "message": "Tags were successfully removed.",
                    "data": {
                      "tags": [
                        {
                          "id": "123",
                          "name": "First"
                        },
                        {
                          "id": "456",
                          "name": "Second"
                        },
                        {
                          "id": "789",
                          "name": "Third"
                        }
                      ],
                      "contact_id": "123456"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "Status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "status": 404,
                    "message": "Not found."
                  }
                }
              }
            }
          },
          "406": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "Status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "status": 406,
                    "message": "Invalid input data."
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/notes/index.json": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "List notes",
        "description": "List all notes assigned to contacts",
        "parameters": [
          {
            "name": "contact_id",
            "in": "query",
            "description": "Filter by contact ID",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter by agent ID",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "keyword",
            "in": "query",
            "description": "Filter by keyword in note content",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max. number of items in response data.",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Number of page to return.",
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notes data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "itemsCount": {
                      "$ref": "#/components/schemas/PaginationData/properties/itemsCount"
                    },
                    "pageCount": {
                      "$ref": "#/components/schemas/PaginationData/properties/pageCount"
                    },
                    "pageNumber": {
                      "$ref": "#/components/schemas/PaginationData/properties/pageNumber"
                    },
                    "limit": {
                      "$ref": "#/components/schemas/PaginationData/properties/limit"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "ContactNote": {
                            "$ref": "#/components/schemas/ContactNote"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "itemsCount": 3,
                    "pageCount": 1,
                    "pageNumber": 1,
                    "limit": 3,
                    "data": [
                      {
                        "ContactNote": {
                          "id": "1234",
                          "contact_id": "567",
                          "user_id": "456",
                          "note": "Note content...",
                          "created": "2018-05-01T12:12:12.000Z"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notes/add/{contactId}.json": {
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Add note",
        "description": "Assign a note to existing contact.",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact ID to which note will be assigned",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "note"
                ],
                "type": "object",
                "properties": {
                  "user_id": {
                    "$ref": "#/components/schemas/ContactNote/properties/user_id"
                  },
                  "note": {
                    "$ref": "#/components/schemas/ContactNote/properties/note"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "No error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/StatusCode/properties/status"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "$ref": "#/components/schemas/ContactNote/properties/id"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "status": 201,
                    "data": {
                      "id": "12345"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Contact not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 404,
                    "message": "Not found."
                  }
                }
              }
            }
          },
          "406": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInvalidData"
                },
                "example": {
                  "responseData": {
                    "status": 406,
                    "message": "Invalid input data.",
                    "data": {
                      "note": [
                        "This field is required."
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 500,
                    "message": "Something went wrong."
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/notes/edit/{noteId}.json": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Edit note",
        "parameters": [
          {
            "name": "noteId",
            "in": "path",
            "description": "Note ID to edit",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "contact_id",
                  "note"
                ],
                "type": "object",
                "properties": {
                  "contact_id": {
                    "$ref": "#/components/schemas/ContactNote/properties/contact_id"
                  },
                  "user_id": {
                    "$ref": "#/components/schemas/ContactNote/properties/user_id"
                  },
                  "note": {
                    "$ref": "#/components/schemas/ContactNote/properties/note"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "No error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/StatusCode/properties/status"
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "status": 200
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 404,
                    "message": "Not found."
                  }
                }
              }
            }
          },
          "406": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInvalidData"
                },
                "example": {
                  "responseData": {
                    "status": 406,
                    "message": "Invalid input data.",
                    "data": {
                      "note": [
                        "This field is required."
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 500,
                    "message": "Something went wrong."
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/notes/delete/{noteId}.json": {
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Delete note",
        "parameters": [
          {
            "name": "noteId",
            "in": "path",
            "description": "Note ID to delete",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGeneralData"
                },
                "example": {
                  "responseData": {
                    "status": 200
                  }
                }
              }
            }
          },
          "404": {
            "description": "Note not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 404,
                    "message": "Not found."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 500,
                    "message": "Something went wrong."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/activity/index.json": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "List activities",
        "description": "List all activities assigned to contacts",
        "parameters": [
          {
            "name": "contact_id",
            "in": "query",
            "description": "Filter by contact ID",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by type - check below for possible values",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max. number of items in response data.",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Number of page to return.",
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Activities data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "itemsCount": {
                      "$ref": "#/components/schemas/PaginationData/properties/itemsCount"
                    },
                    "pageCount": {
                      "$ref": "#/components/schemas/PaginationData/properties/pageCount"
                    },
                    "pageNumber": {
                      "$ref": "#/components/schemas/PaginationData/properties/pageNumber"
                    },
                    "limit": {
                      "$ref": "#/components/schemas/PaginationData/properties/limit"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "ContactActivity": {
                            "$ref": "#/components/schemas/ContactActivity"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "itemsCount": 3,
                    "pageCount": 1,
                    "pageNumber": 1,
                    "limit": 3,
                    "data": [
                      {
                        "ContactActivity": {
                          "id": "1234",
                          "contact_id": "567",
                          "type": "order",
                          "name": "Order #201712399",
                          "description": "Content of order...",
                          "activity_author": "John Doe",
                          "external_id": "201712399",
                          "external_url": "https://www.shopify.com/orders/detail/999",
                          "activity_date": "2018-02-02T12:12:12.000Z",
                          "created": "2018-05-01T12:12:12.000Z"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/activity/add/{contactId}.json": {
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Add activity",
        "description": "Assign an activity to existing contact.",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact ID to which activity will be assigned",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "type"
                ],
                "type": "object",
                "properties": {
                  "type": {
                    "$ref": "#/components/schemas/ContactActivity/properties/type"
                  },
                  "name": {
                    "$ref": "#/components/schemas/ContactActivity/properties/name"
                  },
                  "activity_date": {
                    "$ref": "#/components/schemas/ContactActivity/properties/activity_date"
                  },
                  "description": {
                    "$ref": "#/components/schemas/ContactActivity/properties/description"
                  },
                  "activity_author": {
                    "$ref": "#/components/schemas/ContactActivity/properties/activity_author"
                  },
                  "external_id": {
                    "$ref": "#/components/schemas/ContactActivity/properties/external_id"
                  },
                  "external_url": {
                    "$ref": "#/components/schemas/ContactActivity/properties/external_url"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "No error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/StatusCode/properties/status"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "$ref": "#/components/schemas/ContactActivity/properties/id"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "status": 201,
                    "data": {
                      "id": "12345"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Contact not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 404,
                    "message": "Not found."
                  }
                }
              }
            }
          },
          "406": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInvalidData"
                },
                "example": {
                  "responseData": {
                    "status": 406,
                    "message": "Invalid input data.",
                    "data": {
                      "name": [
                        "This field is required."
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 500,
                    "message": "Something went wrong."
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/activity/edit/{activityId}.json": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Edit activity",
        "parameters": [
          {
            "name": "activityId",
            "in": "path",
            "description": "Activity ID to edit",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "contact_id"
                ],
                "type": "object",
                "properties": {
                  "contact_id": {
                    "$ref": "#/components/schemas/ContactActivity/properties/contact_id"
                  },
                  "type": {
                    "$ref": "#/components/schemas/ContactActivity/properties/type"
                  },
                  "name": {
                    "$ref": "#/components/schemas/ContactActivity/properties/name"
                  },
                  "activity_date": {
                    "$ref": "#/components/schemas/ContactActivity/properties/activity_date"
                  },
                  "description": {
                    "$ref": "#/components/schemas/ContactActivity/properties/description"
                  },
                  "activity_author": {
                    "$ref": "#/components/schemas/ContactActivity/properties/activity_author"
                  },
                  "external_id": {
                    "$ref": "#/components/schemas/ContactActivity/properties/external_id"
                  },
                  "external_url": {
                    "$ref": "#/components/schemas/ContactActivity/properties/external_url"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "No error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/StatusCode/properties/status"
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "status": 200
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 404,
                    "message": "Not found."
                  }
                }
              }
            }
          },
          "406": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInvalidData"
                },
                "example": {
                  "responseData": {
                    "status": 406,
                    "message": "Invalid input data.",
                    "data": {
                      "contact_id": [
                        "This field is required."
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 500,
                    "message": "Something went wrong."
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/activity/delete/{activityId}.json": {
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Delete activity",
        "parameters": [
          {
            "name": "activityId",
            "in": "path",
            "description": "Activity ID to delete",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGeneralData"
                },
                "example": {
                  "responseData": {
                    "status": 200
                  }
                }
              }
            }
          },
          "404": {
            "description": "Activity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 404,
                    "message": "Not found."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 500,
                    "message": "Something went wrong."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/numbers/index.json": {
      "get": {
        "tags": [
          "Numbers"
        ],
        "summary": "List numbers",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Filter by number ID",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "country_code",
            "in": "query",
            "description": "Filter by country calling code",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "area_code",
            "in": "query",
            "description": "Filter by local area code. Area code cannot contain 0 at the beginning",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "connected_to",
            "in": "query",
            "description": "Filter by route type. `0 = 'group'`, `1 = 'agent'`, `2 = 'conference room'`, `3 = 'fax'`",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1,
                2,
                3
              ]
            }
          },
          {
            "name": "is_free",
            "in": "query",
            "description": "Filter by availability. `0 = 'taken'`, `1 = 'free'`",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max. number of items in response data.",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Number of page to return.",
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Numbers data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "itemsCount": {
                      "$ref": "#/components/schemas/PaginationData/properties/itemsCount"
                    },
                    "pageCount": {
                      "$ref": "#/components/schemas/PaginationData/properties/pageCount"
                    },
                    "pageNumber": {
                      "$ref": "#/components/schemas/PaginationData/properties/pageNumber"
                    },
                    "limit": {
                      "$ref": "#/components/schemas/PaginationData/properties/limit"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "CallNumber": {
                            "$ref": "#/components/schemas/CallNumber"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "itemsCount": 3,
                    "pageCount": 1,
                    "pageNumber": 1,
                    "limit": 3,
                    "data": [
                      {
                        "CallNumber": {
                          "id": "123",
                          "country_code": "44",
                          "area_code": "20",
                          "internal_name": "Sales support",
                          "caller_id_e164": 442012345678,
                          "is_redirected": false,
                          "connected_to": "1",
                          "source_id": "4"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/numbers/edit/{id}.json": {
      "post": {
        "tags": [
          "Numbers"
        ],
        "summary": "Edit a number",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Number ID to edit",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "internal_name": {
                    "$ref": "#/components/schemas/CallNumber/properties/internal_name"
                  },
                  "connected_to": {
                    "$ref": "#/components/schemas/CallNumber/properties/connected_to"
                  },
                  "source_id": {
                    "$ref": "#/components/schemas/CallNumber/properties/source_id"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "No error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/StatusCode/properties/status"
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "status": 200
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 404,
                    "message": "Not found."
                  }
                }
              }
            }
          },
          "406": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInvalidData"
                },
                "example": {
                  "responseData": {
                    "status": 406,
                    "message": "Invalid input data.",
                    "data": {
                      "type": [
                        "Please supply a valid type."
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 500,
                    "message": "Something went wrong."
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/numbers/clear/{id}.json": {
      "delete": {
        "tags": [
          "Numbers"
        ],
        "summary": "Unregister a number",
        "description": "Clear current route settings of the number. Number will be marked as free.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Number ID to unregister",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGeneralData"
                },
                "example": {
                  "responseData": {
                    "status": 200
                  }
                }
              }
            }
          },
          "404": {
            "description": "Number not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 404,
                    "message": "Not found."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 500,
                    "message": "Something went wrong."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/countries/index.json": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "List countries",
        "responses": {
          "200": {
            "description": "All countries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "responseData": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "Country": {
                            "$ref": "#/components/schemas/Country"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "responseData": [
                    {
                      "Country": {
                        "id": "61",
                        "name": "Denmark",
                        "country_code": "DK",
                        "iso3": "DNK",
                        "calling_code": "45"
                      }
                    },
                    {
                      "Country": {
                        "id": "235",
                        "name": "United Kingdom",
                        "country_code": "GB",
                        "iso3": "GBR",
                        "calling_code": "44"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/blacklist/index.json": {
      "get": {
        "tags": [
          "Other"
        ],
        "summary": "List blacklist",
        "description": "List blacklisted numbers.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Filter by ID",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "country_code",
            "in": "query",
            "description": "Filter by country calling code",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by type",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "incoming",
                "outgoing"
              ]
            }
          },
          {
            "name": "public_number",
            "in": "query",
            "description": "Filter by number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max. number of items in response data.",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Number of page to return.",
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Blacklist data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "itemsCount": {
                      "$ref": "#/components/schemas/PaginationData/properties/itemsCount"
                    },
                    "pageCount": {
                      "$ref": "#/components/schemas/PaginationData/properties/pageCount"
                    },
                    "pageNumber": {
                      "$ref": "#/components/schemas/PaginationData/properties/pageNumber"
                    },
                    "limit": {
                      "$ref": "#/components/schemas/PaginationData/properties/limit"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "Blacklist": {
                            "$ref": "#/components/schemas/Blacklist"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "itemsCount": 2,
                    "pageCount": 1,
                    "pageNumber": 1,
                    "limit": 2,
                    "data": [
                      {
                        "Blacklist": {
                          "id": "123",
                          "type": "all",
                          "public_number": 442012345678
                        }
                      },
                      {
                        "Blacklist": {
                          "id": "456",
                          "type": "incoming",
                          "public_number": 442012345679
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/blacklist/add.json": {
      "put": {
        "tags": [
          "Other"
        ],
        "summary": "Add number to blacklist",
        "description": "Add number to blacklist.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "public_number",
                  "type"
                ],
                "type": "object",
                "properties": {
                  "type": {
                    "$ref": "#/components/schemas/Blacklist/properties/type"
                  },
                  "public_number": {
                    "$ref": "#/components/schemas/Blacklist/properties/public_number"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "No error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/StatusCode/properties/status"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "$ref": "#/components/schemas/Blacklist/properties/id"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "status": 201,
                    "data": {
                      "id": "12345"
                    }
                  }
                }
              }
            }
          },
          "406": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInvalidData"
                },
                "example": {
                  "responseData": {
                    "status": 406,
                    "message": "Invalid input data.",
                    "data": {
                      "public_number": [
                        "Please supply only valid numbers. Number +441234 is not valid."
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 500,
                    "message": "Something went wrong."
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/blacklist/edit/{id}.json": {
      "post": {
        "tags": [
          "Other"
        ],
        "summary": "Edit number on blacklist",
        "description": "Edit blacklisted number.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID to edit",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "public_number",
                  "type"
                ],
                "type": "object",
                "properties": {
                  "type": {
                    "$ref": "#/components/schemas/Blacklist/properties/type"
                  },
                  "public_number": {
                    "$ref": "#/components/schemas/Blacklist/properties/public_number"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "No error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/StatusCode/properties/status"
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "status": 200
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 404,
                    "message": "Not found."
                  }
                }
              }
            }
          },
          "406": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInvalidData"
                },
                "example": {
                  "responseData": {
                    "status": 406,
                    "message": "Invalid input data.",
                    "data": {
                      "public_number": [
                        "Please supply only valid numbers. Number +441234 is not valid."
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 500,
                    "message": "Something went wrong."
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/blacklist/delete/{id}.json": {
      "delete": {
        "tags": [
          "Other"
        ],
        "summary": "Delete number from blacklist",
        "description": "Delete the number from blacklist.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID to delete",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGeneralData"
                },
                "example": {
                  "responseData": {
                    "status": 200
                  }
                }
              }
            }
          },
          "404": {
            "description": "Blacklist not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 404,
                    "message": "Not found."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 500,
                    "message": "Something went wrong."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sms/send.json": {
      "post": {
        "tags": [
          "Sms"
        ],
        "summary": "Send sms",
        "description": "The success response for sms/send.json may include false success attribute, where attribute data is populated with the provider error message",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "message",
                  "recipient",
                  "sender"
                ],
                "type": "object",
                "properties": {
                  "recipient": {
                    "$ref": "#/components/schemas/Sms/properties/recipient"
                  },
                  "message": {
                    "$ref": "#/components/schemas/Sms/properties/message"
                  },
                  "sender": {
                    "$ref": "#/components/schemas/Sms/properties/sender"
                  },
                  "country_code": {
                    "$ref": "#/components/schemas/Sms/properties/country_code"
                  },
                  "images_by_url": {
                    "$ref": "#/components/schemas/Sms/properties/images_by_url"
                  },
                  "images": {
                    "$ref": "#/components/schemas/Sms/properties/images"
                  },
                  "file_by_url": {
                    "$ref": "#/components/schemas/Sms/properties/file_by_url"
                  },
                  "file": {
                    "$ref": "#/components/schemas/Sms/properties/file"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Status of sms sending",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Success result"
                    },
                    "data": {
                      "type": "object",
                      "description": "If success is true, data contains object with properties : recipent,message, sender and country_code, else if success is false, data contains error message"
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "success": "true|false",
                    "data": "{'recipient': 'string','message': 'string','sender': 'string','country_code': 'string'}\n    |SMS send failed|Not allowed country.|Unknown number|Limit exceeded|Bad number configuration"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized action ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 401,
                    "message": "Unauthorized action"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Insufficient Funds",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 403,
                    "message": "Insufficient Funds"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 500,
                    "message": "Something went wrong."
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/calls/index.json": {
      "get": {
        "tags": [
          "Calls"
        ],
        "summary": "Call history",
        "parameters": [
          {
            "name": "public_internal",
            "in": "query",
            "description": "Filter by internal number of agent",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "public_external",
            "in": "query",
            "description": "Filter by number of caller",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "description": "Filter by date from, e.g. 2017-12-24 12:22:00",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "description": "Filter by date to, napríklad 2017-12-24 12:22:00",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "contact_id",
            "in": "query",
            "description": "Filter by assigned contact ID",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter by assigned agent ID",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "agent_extension",
            "in": "query",
            "description": "Filter by assigned agent's extension.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by call type",
            "schema": {
              "type": "string",
              "enum": [
                "incoming",
                "outgoing",
                "internal"
              ]
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by call status - 'missed' = for only missed calls, 'answered' = for all answered calls",
            "schema": {
              "type": "string",
              "enum": [
                "missed",
                "answered"
              ]
            }
          },
          {
            "name": "tag_id",
            "in": "query",
            "description": "Filter by assigned call tag ID",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "call_id",
            "in": "query",
            "description": "Filter by call ID",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max. number of items in response data.",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Number of page to return.",
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Calls data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "itemsCount": {
                      "$ref": "#/components/schemas/PaginationData/properties/itemsCount"
                    },
                    "pageCount": {
                      "$ref": "#/components/schemas/PaginationData/properties/pageCount"
                    },
                    "pageNumber": {
                      "$ref": "#/components/schemas/PaginationData/properties/pageNumber"
                    },
                    "limit": {
                      "$ref": "#/components/schemas/PaginationData/properties/limit"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "Cdr": {
                            "$ref": "#/components/schemas/Cdr"
                          },
                          "Contact": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "$ref": "#/components/schemas/Contact/properties/id"
                              },
                              "name": {
                                "$ref": "#/components/schemas/Contact/properties/name"
                              },
                              "title": {
                                "$ref": "#/components/schemas/Contact/properties/title"
                              },
                              "company": {
                                "$ref": "#/components/schemas/Contact/properties/company"
                              },
                              "industry": {
                                "$ref": "#/components/schemas/Contact/properties/industry"
                              },
                              "address": {
                                "$ref": "#/components/schemas/Contact/properties/address"
                              },
                              "city": {
                                "$ref": "#/components/schemas/Contact/properties/city"
                              },
                              "zip": {
                                "$ref": "#/components/schemas/Contact/properties/zip"
                              },
                              "state": {
                                "$ref": "#/components/schemas/Contact/properties/state"
                              },
                              "type": {
                                "$ref": "#/components/schemas/Contact/properties/type"
                              },
                              "contact_numbers": {
                                "$ref": "#/components/schemas/Contact/properties/contact_numbers"
                              },
                              "contact_emails": {
                                "$ref": "#/components/schemas/Contact/properties/contact_emails"
                              },
                              "tags": {
                                "$ref": "#/components/schemas/Contact/properties/tags"
                              },
                              "external_urls": {
                                "$ref": "#/components/schemas/Contact/properties/external_urls"
                              },
                              "custom_fields": {
                                "$ref": "#/components/schemas/Contact/properties/custom_fields"
                              },
                              "favorite_agent": {
                                "$ref": "#/components/schemas/FavoriteAgent"
                              }
                            },
                            "description": "Contact assigned to this call"
                          },
                          "CallNumber": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "$ref": "#/components/schemas/CallNumber/properties/id"
                              },
                              "internal_name": {
                                "$ref": "#/components/schemas/CallNumber/properties/internal_name"
                              },
                              "caller_id_e164": {
                                "$ref": "#/components/schemas/CallNumber/properties/caller_id_e164"
                              },
                              "country_code": {
                                "$ref": "#/components/schemas/CallNumber/properties/country_code"
                              },
                              "area_code": {
                                "$ref": "#/components/schemas/CallNumber/properties/area_code"
                              }
                            },
                            "description": "Internal number assigned to this call"
                          },
                          "BillingData": {
                            "$ref": "#/components/schemas/BillingData"
                          },
                          "Agent": {
                            "$ref": "#/components/schemas/AgentCall"
                          },
                          "Notes": {
                            "$ref": "#/components/schemas/CallNote"
                          },
                          "Tags": {
                            "$ref": "#/components/schemas/CallTag"
                          },
                          "Ratings": {
                            "$ref": "#/components/schemas/CallRating"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "itemsCount": 3,
                    "pageCount": 1,
                    "pageNumber": 1,
                    "limit": 3,
                    "data": [
                      {
                        "Cdr": {
                          "id": "27",
                          "billsec": "0",
                          "type": "outgoing",
                          "country_code": "421",
                          "public_external": 421904247371,
                          "public_internal": 421221291400,
                          "recorded": true,
                          "is_voicemail": false,
                          "fax_email": "0",
                          "is_redirected": "0",
                          "redirected_from": "",
                          "is_local": true,
                          "user_id": "1234",
                          "talking_time": "21",
                          "started_at": "2017-10-04T06:33:37.000Z",
                          "answered_at": "2017-10-04T06:33:37.000Z",
                          "ended_at": "2017-10-04T06:33:49.000Z",
                          "waiting_time": 2,
                          "wrapup_time": 5,
                          "recording_link": "https://my.cloudtalk.io/r/play/27"
                        },
                        "Contact": {
                          "id": "1234",
                          "name": "Jon Doe",
                          "title": "title",
                          "company": "First ltd.",
                          "industry": "IT",
                          "address": "8th Avenue",
                          "city": "London",
                          "zip": "838298",
                          "state": "England",
                          "type": "contact",
                          "tags": [
                            {
                              "id": "615",
                              "name": "VIP"
                            },
                            {
                              "id": "609",
                              "name": "Security"
                            }
                          ],
                          "external_urls": [
                            {
                              "external_system": "CloudTalk",
                              "external_url": "https://my.cloudtalk.io/c/show/1234"
                            }
                          ],
                          "contact_numbers": [
                            18884871675
                          ],
                          "contact_emails": [
                            "jon.doe@first.com"
                          ],
                          "custom_fields": [
                            {
                              "key": "age",
                              "value": "33"
                            }
                          ],
                          "favorite_agent": {
                            "id": "1234",
                            "firstname": "Max",
                            "lastname": "Yellow",
                            "fullname": "Max Yellow",
                            "email": "max.yellow@cloudtalk.io",
                            "language": "en",
                            "role": "Admin",
                            "status": "online",
                            "default_outbound_number": 442012345678,
                            "associated_numbers": [
                              442012345678
                            ],
                            "groups": [
                              "sales",
                              "support"
                            ]
                          }
                        },
                        "CallNumber": {
                          "id": "12345",
                          "internal_name": "Sales support",
                          "caller_id_e164": 442012345678,
                          "country_code": "44",
                          "area_code": "20"
                        },
                        "BillingCall": {
                          "price": "0.000000"
                        },
                        "Agent": {
                          "id": "1234",
                          "firstname": "Max",
                          "lastname": "Yellow",
                          "fullname": "Max Yellow",
                          "email": "max.yellow@cloudtalk.io",
                          "language": "en",
                          "role": "Admin",
                          "status": "online",
                          "default_outbound_number": 442012345678,
                          "associated_numbers": [
                            442012345678
                          ],
                          "groups": [
                            "sales",
                            "support"
                          ]
                        },
                        "Notes": [
                          {
                            "id": "23",
                            "note": "Call later"
                          }
                        ],
                        "Tags": [
                          {
                            "id": "123",
                            "name": "Missed"
                          },
                          {
                            "id": "124",
                            "name": "VIP"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/calls/{callId}": {
      "get": {
        "servers": [
          {
            "url": "https://analytics-api.cloudtalk.io/api/"
          }
        ],
        "tags": [
          "Calls"
        ],
        "summary": "Comprehensive information about a call and its flow",
        "parameters": [
          {
            "name": "callId",
            "in": "path",
            "required": true,
            "description": "ID of a call",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed information about a given call",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Call"
                },
                "example": {
                  "cdr_id": 12345,
                  "uuid": "aaaa-bbbb-cccc-dddd",
                  "company_id": 100123,
                  "date": "2022-02-07T13:00:00.000Z",
                  "contact": {
                    "id": 1,
                    "name": "John Doe",
                    "country": "CZ",
                    "number": "+420123123123"
                  },
                  "call_tags": [
                    {
                      "id": 5,
                      "label": "Lead"
                    }
                  ],
                  "call_rating": 3,
                  "internal_number": {
                    "id": 1,
                    "name": "Europe Sales",
                    "number": "+421456456456"
                  },
                  "call_times": {
                    "talking_time": 60,
                    "wrap_up_time": 10,
                    "ringing_time": 10,
                    "total_time": 80,
                    "waiting_time": 20
                  },
                  "direction": "incoming",
                  "type": "regular",
                  "status": "answered",
                  "call_steps": [
                    {
                      "type": "ivr",
                      "id": 1,
                      "date": "2022-02-07T13:00:00.000Z",
                      "total_time": 10,
                      "option": "1"
                    },
                    {
                      "type": "queue",
                      "id": 10,
                      "name": "Queue10",
                      "date": "2022-02-07T13:00:10.000Z",
                      "call_times": {
                        "talking_time": 60,
                        "wrap_up_time": 10,
                        "ringing_time": 10,
                        "total_time": 80,
                        "waiting_time": 10
                      },
                      "status": "answered",
                      "reason": null,
                      "resolved_by": null,
                      "resolved_by_call": {
                        "id": null,
                        "date": null,
                        "agent": {
                          "id": null,
                          "name": null
                        }
                      },
                      "strategy": "rrmemory",
                      "agent_calls": [
                        {
                          "type": "agent",
                          "id": 12,
                          "name": "Agent12",
                          "group_ids": [
                            10,
                            20
                          ],
                          "date": "2022-02-07T13:00:10.000Z",
                          "call_times": {
                            "talking_time": null,
                            "wrap_up_time": null,
                            "ringing_time": 5,
                            "total_time": 5
                          },
                          "status": "missed",
                          "reason": "offline",
                          "resolved_by": null,
                          "resolved_by_call": {
                            "id": null,
                            "date": null,
                            "agent": {
                              "id": null,
                              "name": null
                            }
                          }
                        },
                        {
                          "type": "agent",
                          "id": 11,
                          "name": "Agent11",
                          "group_ids": [
                            10,
                            20
                          ],
                          "date": "2022-02-07T13:00:15.000Z",
                          "call_times": {
                            "talking_time": 60,
                            "wrap_up_time": 10,
                            "ringing_time": 5,
                            "total_time": 75
                          },
                          "status": "answered",
                          "reason": null,
                          "resolved_by": null,
                          "resolved_by_call": {
                            "id": null,
                            "date": null,
                            "agent": {
                              "id": null,
                              "name": null
                            }
                          }
                        }
                      ]
                    }
                  ],
                  "notes": [
                    "string"
                  ],
                  "recorded": true,
                  "out_of_office": false
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid call ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "description": "Status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "The error message"
                    },
                    "error": {
                      "type": "string",
                      "description": "The error name"
                    }
                  }
                },
                "example": {
                  "statusCode": 400,
                  "message": [
                    "callId must be a number conforming to the specified constraints"
                  ],
                  "error": "Bad Request"
                }
              }
            }
          },
          "404": {
            "description": "Call not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "description": "Status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "The error message"
                    },
                    "error": {
                      "type": "string",
                      "description": "The error name"
                    }
                  }
                },
                "example": {
                  "statusCode": 404,
                  "message": "Call with id '12456' doesn't exist on company '100123'",
                  "error": "Not Found"
                }
              }
            }
          }
        }
      }
    },
    "/calls/recording/{callId}.json": {
      "get": {
        "tags": [
          "Calls"
        ],
        "summary": "Recording media",
        "description": "Api endpoint returns media data of recording for selected call. Media data are returned in WAV format.",
        "parameters": [
          {
            "name": "callId",
            "in": "path",
            "description": "Call ID for the requested recording",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recording media data",
            "content": {
              "audio/x-wav": {
                "schema": {
                  "$ref": "#/components/schemas/BinaryData"
                }
              }
            }
          },
          "404": {
            "description": "Recording not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 404,
                    "message": "Not found."
                  }
                }
              },
              "audio/x-wav": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                }
              }
            }
          },
          "410": {
            "description": "Recording expired",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 410,
                    "message": "Recording expired."
                  }
                }
              },
              "audio/x-wav": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                }
              }
            }
          }
        }
      }
    },
    "/recordings/delete/{callId}.json": {
      "delete": {
        "tags": [
          "Calls"
        ],
        "summary": "Delete call recording",
        "description": "Delete call recording file for good. Call recording will be deleted from all our systems.",
        "parameters": [
          {
            "name": "callId",
            "in": "path",
            "description": "Call ID for recording to be deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGeneralData"
                },
                "example": {
                  "responseData": {
                    "status": 200
                  }
                }
              }
            }
          },
          "404": {
            "description": "Call not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 404,
                    "message": "Not found."
                  }
                }
              }
            }
          },
          "410": {
            "description": "Recording not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 410,
                    "message": "Recording not found."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/calls/create.json": {
      "post": {
        "tags": [
          "Calls"
        ],
        "summary": "Make a call",
        "description": "Make a call using to any phone numbers. To place a new outbound call, make an HTTP POST request. At first it will initiate a call to an agent. Maximum waiting time for an agent to pick up the call is 20 seconds. After an agent picks up, we will automatically call desired phone number.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "agent_id",
                  "callee_number"
                ],
                "type": "object",
                "properties": {
                  "agent_id": {
                    "type": "integer",
                    "description": "Agent ID which will make the call."
                  },
                  "callee_number": {
                    "type": "string",
                    "description": "The phone number that will receive this Call. Phone numbers must be in E.164 format (e.g., +442012345678)."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "No error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/StatusCode/properties/status"
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "status": 200
                  }
                }
              }
            }
          },
          "403": {
            "description": "Agent is not online",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 403,
                    "message": "Agent is not online."
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 404,
                    "message": "Not found."
                  }
                }
              }
            }
          },
          "406": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInvalidData"
                },
                "example": {
                  "responseData": {
                    "status": 406,
                    "message": "Invalid input data."
                  }
                }
              }
            }
          },
          "409": {
            "description": "Agent is already calling",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 409,
                    "message": "Agent is already calling."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 500,
                    "message": "Something went wrong."
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/statistics/realtime/groups.json": {
      "get": {
        "tags": [
          "Calls"
        ],
        "summary": "Group statistics",
        "responses": {
          "200": {
            "description": "Group stats data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "groups": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Group name."
                          },
                          "id": {
                            "type": "integer",
                            "description": "Group ID."
                          },
                          "operators": {
                            "type": "integer",
                            "description": "Number of agents in group."
                          },
                          "answered": {
                            "type": "integer",
                            "description": "Answered calls to group today."
                          },
                          "unanswered": {
                            "type": "integer",
                            "description": "Unanswered calls to group today."
                          },
                          "abandon_rate": {
                            "type": "number",
                            "description": "Abandon rate.",
                            "format": "float"
                          },
                          "avg_waiting_time": {
                            "type": "integer",
                            "description": "Average waiting time today."
                          },
                          "max_waiting_time": {
                            "type": "integer",
                            "description": "Max waiting time today."
                          },
                          "avg_call_duration": {
                            "type": "integer",
                            "description": "Average call duration today."
                          },
                          "real_time": {
                            "type": "object",
                            "properties": {
                              "waiting_queue": {
                                "type": "integer",
                                "description": "Waiting calls"
                              },
                              "avg_waiting_time": {
                                "type": "integer",
                                "description": "Average waiting time"
                              },
                              "max_waiting_time": {
                                "type": "integer",
                                "description": "Max waiting time."
                              },
                              "avg_abandonment_time": {
                                "type": "integer",
                                "description": "Average abandonment time."
                              }
                            },
                            "description": "Real time stats"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "data": {
                      "groups": [
                        {
                          "name": "Agents",
                          "id": 123,
                          "operators": 3,
                          "answered": 12,
                          "unanswered": 2,
                          "abandon_rate": 14.29,
                          "avg_waiting_time": 48,
                          "max_waiting_time": 55,
                          "avg_call_duration": 24,
                          "real_time": {
                            "waiting_queue": 2,
                            "avg_waiting_time": 23,
                            "max_waiting_time": 53,
                            "avg_abandonment_time": 12
                          }
                        },
                        {
                          "name": "Avengers",
                          "id": 124,
                          "operators": 3,
                          "answered": 12,
                          "unanswered": 2,
                          "abandon_rate": 14.29,
                          "avg_waiting_time": 48,
                          "max_waiting_time": 55,
                          "avg_call_duration": 24,
                          "real_time": {
                            "waiting_queue": 2,
                            "avg_waiting_time": 23,
                            "max_waiting_time": 53,
                            "avg_abandonment_time": 12
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tags/index.json": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "List tags",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Filter by tag ID",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max. number of items in response data.",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Number of page to return.",
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tags data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "itemsCount": {
                      "$ref": "#/components/schemas/PaginationData/properties/itemsCount"
                    },
                    "pageCount": {
                      "$ref": "#/components/schemas/PaginationData/properties/pageCount"
                    },
                    "pageNumber": {
                      "$ref": "#/components/schemas/PaginationData/properties/pageNumber"
                    },
                    "limit": {
                      "$ref": "#/components/schemas/PaginationData/properties/limit"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "Tag ID"
                          },
                          "name": {
                            "type": "string",
                            "description": "Tag name"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "itemsCount": 3,
                    "pageCount": 1,
                    "pageNumber": 1,
                    "limit": 3,
                    "data": [
                      {
                        "Tag": {
                          "id": "99",
                          "name": "Tag"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tags/add.json": {
      "put": {
        "tags": [
          "Tags"
        ],
        "summary": "Add a tag",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Tag name"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "No error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/StatusCode/properties/status"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Tag name"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "status": 201,
                    "data": {
                      "id": "12345"
                    }
                  }
                }
              }
            }
          },
          "406": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInvalidData"
                },
                "example": {
                  "responseData": {
                    "status": 406,
                    "message": "Invalid input data.",
                    "data": {
                      "name": [
                        "Tag has already been used. Please select different one."
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 500,
                    "message": "Something went wrong."
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/tags/edit/{id}.json": {
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Edit a tag",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tag ID to edit",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Tag name"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "No error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/StatusCode/properties/status"
                    }
                  }
                },
                "example": {
                  "responseData": {
                    "status": 200
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 404,
                    "message": "Not found."
                  }
                }
              }
            }
          },
          "406": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInvalidData"
                },
                "example": {
                  "responseData": {
                    "status": 406,
                    "message": "Invalid input data.",
                    "data": {
                      "name": [
                        "Tag has already been used. Please select different one."
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 500,
                    "message": "Something went wrong."
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/tags/delete/{id}.json": {
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Delete a tag",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tag ID to delete",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGeneralData"
                },
                "example": {
                  "responseData": {
                    "status": 200
                  }
                }
              }
            }
          },
          "404": {
            "description": "Tag not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorData"
                },
                "example": {
                  "responseData": {
                    "status": 404,
                    "message": "Not found."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ai/calls/{callId}/summary": {
      "get": {
        "servers": [
          {
            "url": "https://api.cloudtalk.io/v1"
          }
        ],
        "tags": [
          "Conversation Intelligence"
        ],
        "summary": "Summary",
        "parameters": [
          {
            "$ref": "#/components/parameters/callId"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about a given call's summary",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "callId": {
                      "type": "number",
                      "description": "ID of the call"
                    },
                    "summary": {
                      "type": "string",
                      "description": "Summary of the call"
                    }
                  },
                  "required": [
                    "callId",
                    "summary"
                  ]
                },
                "example": {
                  "callId": 12345,
                  "summary": "This is a summary of the call."
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/ai/calls/{callId}/overall-sentiment": {
      "get": {
        "servers": [
          {
            "url": "https://api.cloudtalk.io/v1"
          }
        ],
        "tags": [
          "Conversation Intelligence"
        ],
        "summary": "Overall sentiment",
        "parameters": [
          {
            "$ref": "#/components/parameters/callId"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about a given call's overall sentiment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallOverallSentiment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/ai/calls/{callId}/talk-listen-ratio": {
      "get": {
        "servers": [
          {
            "url": "https://api.cloudtalk.io/v1"
          }
        ],
        "tags": [
          "Conversation Intelligence"
        ],
        "summary": "Talk-listen ratio",
        "parameters": [
          {
            "$ref": "#/components/parameters/callId"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about a given call's talk-listen ratio",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallTalkListenRatio"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/ai/calls/{callId}/topics": {
      "get": {
        "servers": [
          {
            "url": "https://api.cloudtalk.io/v1"
          }
        ],
        "tags": [
          "Conversation Intelligence"
        ],
        "summary": "Topics",
        "parameters": [
          {
            "$ref": "#/components/parameters/callId"
          },
          {
            "$ref": "#/components/parameters/paginationLimit"
          },
          {
            "$ref": "#/components/parameters/paginationOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about a given call's topics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallTopics"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/ai/calls/{callId}/transcription": {
      "get": {
        "servers": [
          {
            "url": "https://api.cloudtalk.io/v1"
          }
        ],
        "tags": [
          "Conversation Intelligence"
        ],
        "summary": "Transcription",
        "parameters": [
          {
            "$ref": "#/components/parameters/callId"
          },
          {
            "$ref": "#/components/parameters/paginationLimit"
          },
          {
            "$ref": "#/components/parameters/paginationOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about a given call's transcription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallTranscription"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/ai/calls/{callId}/smart-notes": {
      "get": {
        "servers": [
          {
            "url": "https://api.cloudtalk.io/v1"
          }
        ],
        "tags": [
          "Conversation Intelligence"
        ],
        "summary": "Smart notes",
        "parameters": [
          {
            "$ref": "#/components/parameters/callId"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about a given call's smart notes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallSmartNotes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/ai/calls/{callId}/details-link": {
      "get": {
        "servers": [
          {
            "url": "https://api.cloudtalk.io/v1"
          }
        ],
        "tags": [
          "Conversation Intelligence"
        ],
        "summary": "Link to the call details page",
        "parameters": [
          {
            "$ref": "#/components/parameters/callId"
          }
        ],
        "responses": {
          "200": {
            "description": "Link to the details of the call in the analytics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "link": {
                      "type": "string",
                      "description": "Link to the details of the call in the analytics"
                    }
                  },
                  "required": [
                    "link"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/voice-agent/calls": {
      "post": {
        "servers": [
          {
            "url": "https://api.cloudtalk.io/v1"
          }
        ],
        "tags": [
          "VoiceAgent"
        ],
        "summary": "Initiate a VoiceAgent call",
        "description": "Creates a new VoiceAgent call with specified parameters and properties. Call properties are optional and can be used to configure the call.",
        "operationId": "createVoiceAgentCall",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["call_number", "voice_agent_id"],
                "properties": {
                  "call_number": {
                    "type": "string",
                    "description": "The phone number to call",
                    "example": "+421000000000"
                  },
                  "voice_agent_id": {
                    "type": "string",
                    "description": "ID of the VoiceAgent to use for the call",
                    "example": "681b0639876543cfbc3d6b55"
                  },
                  "call_properties": {
                    "type": "object",
                    "description": "Additional properties for configuring the VoiceAgent call",
                    "properties": {
                      "output": {
                        "type": "object",
                        "description": "Variables that will be included in the VoiceAgent call analysis output",
                        "properties": {
                          "variables": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Variables that will be included in the call analysis output",
                            "example": {
                              "external_contact_id": 12345
                            }
                          }
                        }
                      },
                      "system_prompt": {
                        "type": "object",
                        "description": "Variables that will be used during the actual call by the VoiceAgent",
                        "properties": {
                          "variables": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Variables that will be used in the VoiceAgent's system prompt during the call",
                            "example": {
                              "name": "John Doe",
                              "company": "CloudTalk"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContentResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "BadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "Error code",
                  "example": "BAD_REQUEST"
                },
                "message": {
                  "type": "string",
                  "description": "Error message",
                  "example": "The request could not be understood or was missing required parameters."
                }
              }
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "Error code",
                  "example": "UNAUTHORIZED"
                },
                "message": {
                  "type": "string",
                  "description": "Error message",
                  "example": "You are not authorized to access this resource."
                }
              }
            }
          }
        }
      },
      "NotFound": {
        "description": "Not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "Error code",
                  "example": "NOT_FOUND"
                },
                "message": {
                  "type": "string",
                  "description": "Error message",
                  "example": "The requested resource was not found."
                }
              }
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "Error code",
                  "example": "INTERNAL_SERVER_ERROR"
                },
                "message": {
                  "type": "string",
                  "description": "Error message",
                  "example": "An unexpected error occurred on the server."
                }
              }
            }
          }
        }
      },
      "NoContentResponse": {
        "description": "Operation completed successfully with no content to return",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "responseData": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 204
                    },
                    "message": {
                      "type": "string",
                      "example": "No Content"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "CallTranscription": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "callId": {
                "type": "number",
                "description": "ID of the call"
              },
              "segments": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "start": {
                      "type": "number",
                      "description": "Start time of the segment in seconds"
                    },
                    "end": {
                      "type": "number",
                      "description": "End time of the segment in seconds"
                    },
                    "caller": {
                      "type": "string",
                      "description": "Caller local identifier"
                    },
                    "text": {
                      "type": "string",
                      "description": "Transcription text of the segment"
                    }
                  },
                  "required": [
                    "start",
                    "end",
                    "caller",
                    "text"
                  ]
                }
              },
              "callers": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Caller"
                }
              },
              "language": {
                "type": "string",
                "description": "Language of the transcription"
              }
            },
            "required": [
              "callId",
              "segments",
              "callers",
              "language"
            ]
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "required": [
          "data",
          "pagination"
        ],
        "example": {
          "data": {
            "callId": 12345,
            "segments": [
              {
                "start": 1.501,
                "end": 4.599,
                "caller": "caller2",
                "text": "Hello, I would like to ask for help."
              },
              {
                "start": 5.173,
                "end": 8.599,
                "caller": "caller1",
                "text": "Hi. What's your issue?"
              }
            ],
            "callers": [
              {
                "id": 5000,
                "type": "contact",
                "localIdentifier": "caller1"
              },
              {
                "id": 1000,
                "type": "agent",
                "localIdentifier": "caller2"
              }
            ],
            "language": "en"
          },
          "pagination": {
            "limit": 2,
            "offset": 0,
            "total": 10
          }
        }
      },
      "CallOverallSentiment": {
        "type": "object",
        "properties": {
          "callId": {
            "type": "number",
            "description": "ID of the call"
          },
          "overallSentiment": {
            "type": "string",
            "description": "Overall sentiment of the call",
            "enum": [
              "very negative",
              "negative",
              "neutral",
              "positive",
              "very positive"
            ]
          }
        },
        "required": [
          "callId",
          "overallSentiment"
        ],
        "example": {
          "callId": 12345,
          "overallSentiment": "positive"
        }
      },
      "CallTalkListenRatio": {
        "type": "object",
        "properties": {
          "callId": {
            "type": "number",
            "description": "ID of the call"
          },
          "talkListenRatio": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "caller": {
                  "type": "string",
                  "description": "Caller local identifier"
                },
                "talkingTime": {
                  "type": "number",
                  "description": "Talking time of the caller in seconds"
                },
                "ratio": {
                  "type": "number",
                  "description": "Talk to listen ratio of the caller in percentage"
                }
              },
              "required": [
                "caller",
                "talkingTime",
                "ratio"
              ]
            }
          },
          "callers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Caller"
            }
          }
        },
        "required": [
          "callId",
          "talkListenRatio",
          "callers"
        ],
        "example": {
          "callId": 12345,
          "talkListenRatio": [
            {
              "caller": "caller1",
              "talkingTime": 120,
              "ratio": 60
            },
            {
              "caller": "caller2",
              "talkingTime": 80,
              "ratio": 40
            }
          ],
          "callers": [
            {
              "id": 5000,
              "type": "contact",
              "localIdentifier": "caller1"
            },
            {
              "id": 1000,
              "type": "agent",
              "localIdentifier": "caller2"
            }
          ]
        }
      },
      "CallSmartNotes": {
        "type": "object",
        "properties": {
          "callId": {
            "type": "number",
            "description": "ID of the call"
          },
          "smartNotes": {
            "type": "object",
            "description": "Smart notes of the call",
            "properties": {
              "callDetails": {
                "$ref": "#/components/schemas/CallDetailsNote"
              },
              "actionItems": {
                "type": "array",
                "description": "Specific tasks assigned during the call",
                "items": {
                  "type": "string"
                }
              },
              "decisionsMade": {
                "type": "array",
                "description": "Important decisions agreed upon during the call",
                "items": {
                  "type": "string"
                }
              },
              "openQuestions": {
                "type": "array",
                "description": "Questions that need to be addressed after the call",
                "items": {
                  "type": "string"
                }
              },
              "importantDatesAndDeadlines": {
                "$ref": "#/components/schemas/ImportantDatesAndDeadlinesNotes"
              },
              "risksAndIssues": {
                "type": "array",
                "description": "Identify potential risks or issues discussed during the call",
                "items": {
                  "type": "string"
                }
              },
              "customerFeedback": {
                "type": "array",
                "description": "Highlight feedback from customers that can inform product development or service improvement",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "callDetails"
            ]
          }
        },
        "required": [
          "callId",
          "smartNotes"
        ],
        "example": {
          "callId": 12345,
          "smartNotes": {
            "callDetails": {
              "callDateTime": "2024-01-01T21:00:00Z",
              "participants": [
                {
                  "name": "Jone Smith",
                  "jobPosition": "Job position",
                  "company": "Company",
                  "callerType": "agent"
                },
                {
                  "name": "Tatiana Rogers",
                  "callerType": "contact"
                }
              ],
              "callMetadata": "Reservation number"
            },
            "actionItems": [
              "Determine the final price"
            ],
            "decisionsMade": [
              "Make an order"
            ],
            "openQuestions": [
              "Final price"
            ],
            "importantDatesAndDeadlines": [
              {
                "dateMention": "2024-01-11T10:00:00Z",
                "eventDescription": "Repeat the call"
              }
            ],
            "risksAndIssues": [
              "Concern about the cost of the services"
            ],
            "customerFeedback": [
              "Good service"
            ]
          }
        }
      },
      "CallDetailsNote": {
        "type": "object",
        "description": "Significant updates discussed during the call",
        "properties": {
          "callDateTime": {
            "type": "string",
            "description": "Date and time of the call",
            "format": "date-time"
          },
          "participants": {
            "type": "array",
            "description": "Name, position and company of participants of the call",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "First and last name"
                },
                "jobPosition": {
                  "type": "string",
                  "description": "Job position"
                },
                "company": {
                  "type": "string",
                  "description": "Company name"
                },
                "callerType": {
                  "type": "string",
                  "description": "Caller type",
                  "enum": [
                    "agent",
                    "contact"
                  ]
                }
              },
              "required": [
                "callerType"
              ]
            }
          },
          "callMetadata": {
            "type": "string",
            "description": "Metadata such as location, reservation number, etc"
          },
          "required": [
            "callDateTime",
            "participants"
          ]
        }
      },
      "ImportantDatesAndDeadlinesNotes": {
        "type": "array",
        "description": "Capture significant dates mentioned, with clickable links to add them directly to the calendar",
        "items": {
          "type": "object",
          "properties": {
            "dateMention": {
              "type": "string",
              "description": "Date and time of the event",
              "format": "date-time"
            },
            "eventDescription": {
              "type": "string",
              "description": "Description of the event"
            }
          },
          "required": [
            "dateMention",
            "eventDescription"
          ]
        }
      },
      "CallTopicSpan": {
        "type": "object",
        "properties": {
          "end": {
            "type": "number",
            "description": "End time of the span in seconds"
          },
          "text": {
            "type": "string",
            "description": "Transcription of the span"
          },
          "start": {
            "type": "number",
            "description": "Start time of the span in seconds"
          },
          "caller": {
            "type": "string",
            "description": "Caller local identifier"
          }
        },
        "required": [
          "end",
          "text",
          "start",
          "caller"
        ]
      },
      "CallTopic": {
        "type": "object",
        "properties": {
          "spans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CallTopicSpan"
            }
          },
          "topic": {
            "type": "string",
            "description": "Topic of the call"
          },
          "weight": {
            "type": "number",
            "description": "Weight of the topic"
          }
        },
        "required": [
          "spans",
          "topic",
          "weight"
        ]
      },
      "CallTopics": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "callId": {
                "type": "number",
                "description": "ID of the call"
              },
              "topics": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CallTopic"
                }
              },
              "callers": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Caller"
                }
              }
            },
            "required": [
              "callId",
              "topics",
              "callers"
            ]
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "required": [
          "data",
          "pagination"
        ],
        "example": {
          "data": {
            "callId": 12345,
            "topics": [
              {
                "spans": [
                  {
                    "end": 3.182,
                    "text": "Let's start the discussion in this group.",
                    "start": 1.867,
                    "caller": "caller1"
                  }
                ],
                "topic": "Group Call",
                "weight": 0.5
              }
            ],
            "callers": [
              {
                "id": 5000,
                "type": "contact",
                "localIdentifier": "caller1"
              },
              {
                "id": 1000,
                "type": "agent",
                "localIdentifier": "caller2"
              }
            ]
          },
          "pagination": {
            "limit": 1,
            "offset": 0,
            "total": 10
          }
        }
      },
      "Caller": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "agent",
              "contact"
            ],
            "description": "Type of caller"
          },
          "id": {
            "type": "integer",
            "description": "Caller ID if exists in the system",
            "nullable": true
          },
          "localIdentifier": {
            "type": "string",
            "description": "Local identifier of the caller"
          }
        },
        "required": [
          "id",
          "type",
          "localIdentifier"
        ],
        "example": {
          "id": 1000,
          "type": "agent",
          "localIdentifier": "caller1"
        }
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "Maximum number of items to return",
            "example": 10
          },
          "offset": {
            "type": "integer",
            "description": "Offset of the returned items",
            "example": 0
          },
          "total": {
            "type": "integer",
            "description": "Total number of items",
            "example": 100
          }
        },
        "required": [
          "limit",
          "offset",
          "total"
        ]
      },
      "CueCardRequest": {
        "type": "object",
        "required": [
          "title",
          "call_uuid",
          "type",
          "content"
        ],
        "properties": {
          "call_uuid": {
            "type": "string",
            "description": "unique id of the active call"
          },
          "type": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "description": "Cue card Title"
          },
          "subtitle": {
            "type": "string",
            "description": "Cue card Subtitle"
          },
          "icon_url": {
            "type": "string",
            "description": "Url path to the cue card icon"
          },
          "content": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ContentHTML"
              },
              {
                "$ref": "#/components/schemas/ContentBlock"
              }
            ]
          }
        }
      },
      "ContentHTML": {
        "type": "string",
        "description": "The value as typed in html text editor"
      },
      "ContentBlock": {
        "type": "array",
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/ContentBlockTextField"
            },
            {
              "$ref": "#/components/schemas/ContentBlockRichText"
            },
            {
              "$ref": "#/components/schemas/ContentBlockImage"
            },
            {
              "$ref": "#/components/schemas/ContentBlockFile"
            }
          ]
        }
      },
      "ContentBlockTextField": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Field name to display"
          },
          "value": {
            "type": "string",
            "description": "text field value"
          }
        }
      },
      "ContentBlockRichText": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Field name to display"
          },
          "value": {
            "type": "string",
            "description": "The value as typed in Rich text editor"
          }
        }
      },
      "ContentBlockImage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "image name to display"
          },
          "image_url": {
            "type": "string",
            "description": "url path to image"
          }
        }
      },
      "ContentBlockFile": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "file name to display"
          },
          "file_url": {
            "type": "string",
            "description": "url path to file"
          },
          "icon_url": {
            "type": "string",
            "description": "url path to file icon"
          }
        }
      },
      "CueCardError": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "errors": {
            "type": "array",
            "description": "array of errors",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Cdr": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Call ID"
          },
          "billsec": {
            "type": "integer",
            "description": "Duration of the call in seconds"
          },
          "type": {
            "type": "string",
            "description": "Type of call",
            "enum": [
              "incoming",
              "outgoing",
              "internal"
            ]
          },
          "public_external": {
            "type": "string",
            "description": "The number of the caller in E.164 format"
          },
          "public_internal": {
            "type": "string",
            "description": "The internal number of agent in E.164 format"
          },
          "recorded": {
            "type": "boolean",
            "description": "Was call recorded?"
          },
          "is_voicemail": {
            "type": "boolean",
            "description": "Is voicemail call?"
          },
          "fax_email": {
            "type": "string",
            "description": "If present, call was made to fax using this email"
          },
          "is_redirected": {
            "type": "string",
            "description": "Was call redirected?"
          },
          "redirected_from": {
            "type": "string",
            "description": "If the call was redirected, here is the number from which it was redirected"
          },
          "transferred_from": {
            "type": "string",
            "description": "Where did the call was transferred from?"
          },
          "is_local": {
            "type": "boolean",
            "description": "Is local or international call?"
          },
          "user_id": {
            "type": "integer",
            "description": "Agent ID assigned to this call"
          },
          "talking_time": {
            "type": "integer",
            "description": "Duration of the connection between agent and customer"
          },
          "started_at": {
            "type": "string",
            "description": "Date and time when the call started",
            "format": "date-time"
          },
          "answered_at": {
            "type": "string",
            "description": "Date and time when the call was answered",
            "format": "date-time"
          },
          "ended_at": {
            "type": "string",
            "description": "Date and time when the call finished",
            "format": "date-time"
          },
          "waiting_time": {
            "type": "integer",
            "description": "Duration before connection between agent and customer"
          },
          "wrapup_time": {
            "type": "integer",
            "description": "Duration of wrap up time"
          },
          "recording_link": {
            "type": "integer",
            "description": "Link to the call detail with recording"
          }
        },
        "description": "Call data"
      },
      "BillingData": {
        "type": "object",
        "properties": {
          "price": {
            "type": "number",
            "description": "Price of the call"
          }
        },
        "description": "Billing data of the call"
      },
      "Agent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Agent ID"
          },
          "name": {
            "type": "string",
            "description": "Agent\\'s Voice ID"
          },
          "firstname": {
            "type": "string",
            "description": "First name"
          },
          "lastname": {
            "type": "string",
            "description": "Last name"
          },
          "email": {
            "type": "string",
            "description": "Email",
            "format": "email"
          },
          "pass": {
            "type": "string",
            "description": "Password"
          },
          "daily_price_limit": {
            "maximum": 200,
            "minimum": 1,
            "type": "integer",
            "description": "Daily price limit for all calls in EUR. Usually allowed values are from 1 to 200 EUR. Leave empty for using default value."
          },
          "is_daily_limit_ok": {
            "type": "boolean",
            "description": "Is daily price limit OK? If not, agent cannot make new calls"
          },
          "status_outbound": {
            "type": "boolean",
            "description": "Does agent have outbound calls allowed?"
          },
          "availability_status": {
            "type": "string",
            "description": "Current availability status of the agent",
            "enum": [
              "online",
              "offline",
              "paused",
              "calling"
            ]
          },
          "extension": {
            "maximum": 9999,
            "minimum": 1000,
            "type": "integer",
            "description": "Extension of an agent. Extension must be four digits long and be unique across whole company."
          },
          "call_number_id": {
            "minimum": 1,
            "type": "integer",
            "description": "Default outbound number ID"
          },
          "default_number": {
            "type": "string",
            "description": "Default outbound number in E164 format"
          },
          "associated_numbers": {
            "type": "array",
            "description": "array of e164 numbers that the agent has assigned",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Agent data"
      },
      "Groups": {
        "type": "object",
        "properties": {
          "agent_id": {
            "type": "integer",
            "description": "Agent ID"
          },
          "group_id": {
            "type": "integer",
            "description": "Group ID"
          }
        },
        "description": "Agent data"
      },
      "AgentCall": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Agent ID"
          },
          "firstname": {
            "type": "string",
            "description": "First name"
          },
          "lastname": {
            "type": "string",
            "description": "Last name"
          },
          "fullname": {
            "type": "string",
            "description": "Full name"
          },
          "email": {
            "type": "string",
            "description": "Email",
            "format": "email"
          },
          "language": {
            "type": "string",
            "description": "Language"
          },
          "role": {
            "type": "string",
            "description": "Role"
          },
          "status": {
            "type": "string",
            "description": "Online status"
          },
          "default_outbound_number": {
            "type": "string",
            "description": "Default outbound number in E164 format"
          },
          "associated_numbers": {
            "type": "array",
            "description": "Array of associated numbers",
            "items": {
              "type": "string"
            }
          },
          "groups": {
            "type": "array",
            "description": "Array of assigned groups",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Agent data"
      },
      "FavoriteAgent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Agent ID"
          },
          "firstname": {
            "type": "string",
            "description": "First name"
          },
          "lastname": {
            "type": "string",
            "description": "Last name"
          },
          "fullname": {
            "type": "string",
            "description": "Full name"
          },
          "email": {
            "type": "string",
            "description": "Email",
            "format": "email"
          },
          "language": {
            "type": "string",
            "description": "Language"
          },
          "role": {
            "type": "string",
            "description": "Role"
          },
          "status": {
            "type": "string",
            "description": "Online status"
          },
          "default_outbound_number": {
            "type": "string",
            "description": "Default outbound number in E164 format"
          },
          "associated_numbers": {
            "type": "array",
            "description": "Array of associated numbers",
            "items": {
              "type": "string"
            }
          },
          "groups": {
            "type": "array",
            "description": "Array of assigned groups",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Agent data"
      },
      "AgentStatistics": {
        "type": "object",
        "properties": {
          "fullname": {
            "type": "integer",
            "description": "Agent\\'s full name"
          }
        },
        "description": "Agent data"
      },
      "CallNumber": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Number ID"
          },
          "country_code": {
            "type": "integer",
            "description": "Country calling code"
          },
          "area_code": {
            "type": "integer",
            "description": "Local area code"
          },
          "internal_name": {
            "type": "string",
            "description": "Internal name"
          },
          "caller_id_e164": {
            "type": "string",
            "description": "Full number in international E.164 format"
          },
          "is_redirected": {
            "type": "boolean",
            "description": "Is number redirected?"
          },
          "connected_to": {
            "type": "integer",
            "description": "Routing type. Where is the number connected. `0 = 'group'`, `1 = 'agent'`, `2 = 'conference room'`, `3 = 'fax'`"
          },
          "source_id": {
            "type": "integer",
            "description": "Source ID of where is the number located, e.g. Agent ID, Group ID..."
          }
        },
        "description": "Number data"
      },
      "ContactList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Contact ID"
          },
          "name": {
            "type": "string",
            "description": "Name"
          },
          "company": {
            "type": "string",
            "description": "Company name"
          }
        },
        "description": "Contact data"
      },
      "Contact": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Contact ID"
          },
          "name": {
            "type": "string",
            "maximum": 150,
            "description": "Name"
          },
          "title": {
            "type": "string",
            "maximum": 255,
            "description": "Title"
          },
          "company": {
            "type": "string",
            "maximum": 100,
            "description": "Company name"
          },
          "industry": {
            "type": "string",
            "maximum": 100,
            "description": "Industry"
          },
          "website": {
            "type": "string",
            "maximum": 100,
            "description": "Website"
          },
          "address": {
            "type": "string",
            "maximum": 255,
            "description": "Address"
          },
          "city": {
            "type": "string",
            "maximum": 255,
            "description": "City"
          },
          "zip": {
            "type": "string",
            "maximum": 15,
            "description": "ZIP code"
          },
          "state": {
            "type": "string",
            "maximum": 255,
            "description": "State"
          },
          "country_id": {
            "type": "integer",
            "description": "Country ID"
          },
          "favorite_agent": {
            "type": "integer",
            "description": "Favorite agent ID"
          },
          "type": {
            "type": "string",
            "description": "Type of contact (contact/lead)"
          },
          "created": {
            "type": "string",
            "description": "Created date and time",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "description": "Last modified date and time",
            "format": "date-time"
          },
          "contact_numbers": {
            "type": "array",
            "description": "Array of contact numbers",
            "items": {
              "type": "string"
            }
          },
          "contact_emails": {
            "type": "array",
            "description": "Array of contact emails",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "description": "Array of contact tags",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Tag ID"
                },
                "name": {
                  "type": "string",
                  "description": "Tag name"
                }
              }
            }
          },
          "external_urls": {
            "type": "array",
            "description": "Array of contact external urls",
            "items": {
              "type": "object",
              "properties": {
                "external_system": {
                  "type": "string",
                  "description": "Name of external service. Name will be shown to agents while working with contacts."
                },
                "external_url": {
                  "type": "string",
                  "description": "External URL to contact page"
                }
              }
            }
          },
          "custom_fields": {
            "type": "array",
            "description": "Array of contact emails",
            "items": {
              "type": "object",
              "maximum": 255,
              "properties": {
                "key": {
                  "type": "string",
                  "description": "Custom field key (max 255 chars per attribute)"
                },
                "value": {
                  "type": "string",
                  "description": "Custom field value (max 255 chars per attribute)"
                }
              }
            }
          }
        },
        "description": "Contact data"
      },
      "ExternalUrl": {
        "type": "object",
        "description": "External url to contact"
      },
      "ExternalUrlArray": {
        "type": "array",
        "maxItems": 3,
        "description": "List of all URLs which points to a detail page of a contact in an external service, e.g. CRMs, Helpdesk or any other custom service you use. You may list up to 3 URLs.",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "maxLength": 30,
              "type": "string",
              "description": "Name of external service. Name will be shown to agents while working with contacts."
            },
            "url": {
              "type": "string",
              "description": "External URL to contact page"
            }
          }
        }
      },
      "ContactNumber": {
        "type": "object",
        "properties": {
          "public_number": {
            "type": "string",
            "description": "Full number in international E.164 format"
          }
        },
        "description": "Number assigned to contact"
      },
      "ContactNumberArray": {
        "type": "array",
        "description": "Numbers assigned to contact",
        "items": {
          "type": "object",
          "properties": {
            "public_number": {
              "type": "string",
              "description": "Full number in international E.164 format"
            }
          }
        }
      },
      "ContactEmail": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address",
            "format": "email"
          }
        },
        "description": "Email assigned to contact"
      },
      "ContactEmailArray": {
        "type": "array",
        "description": "Emails assigned to contact",
        "items": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "description": "Email address",
              "format": "email"
            }
          }
        }
      },
      "ContactsTag": {
        "type": "array",
        "description": "Tags for contact - can include multiple",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Tag"
            }
          }
        }
      },
      "ContactAttribute": {
        "type": "array",
        "description": "Attributes for contact - can include multiple",
        "items": {
          "type": "object",
          "properties": {
            "attribute_id": {
              "type": "integer",
              "description": "Attribute ID"
            },
            "title": {
              "type": "string",
              "description": "Attribute name (max 255 chars per attribute)",
              "maximum": 255
            },
            "value": {
              "type": "string",
              "description": "Attribute value (max 255 chars per attribute)",
              "maximum": 255
            }
          }
        }
      },
      "ContactNote": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Note ID"
          },
          "contact_id": {
            "type": "integer",
            "description": "Assigned contact ID"
          },
          "user_id": {
            "type": "integer",
            "description": "Assigned agent ID"
          },
          "note": {
            "type": "string",
            "description": "Note content"
          },
          "created": {
            "type": "string",
            "description": "Created date and time",
            "format": "date-time"
          }
        },
        "description": "Note data"
      },
      "ContactActivity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Activity ID"
          },
          "contact_id": {
            "type": "integer",
            "description": "Assigned contact ID"
          },
          "type": {
            "type": "string",
            "description": "Type of activity",
            "enum": [
              "order",
              "task",
              "chat",
              "ticket",
              "other",
              "invoice",
              "proforma",
              "estimate",
              "cancel"
            ]
          },
          "name": {
            "type": "string",
            "description": "Name/Title"
          },
          "description": {
            "type": "string",
            "description": "Detailed description"
          },
          "activity_author": {
            "type": "string",
            "description": "Author of activity - user name you want to show"
          },
          "external_id": {
            "type": "integer",
            "description": "Activity ID from external resource - e.g. your order ID"
          },
          "external_url": {
            "type": "string",
            "description": "External url which can be opened from activity detail"
          },
          "activity_date": {
            "type": "string",
            "description": "Activity date and time. Set to current company time by default.",
            "format": "date-time"
          },
          "created": {
            "type": "string",
            "description": "Created date and time",
            "format": "date-time"
          }
        },
        "description": "Activity data"
      },
      "Country": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Country ID"
          },
          "name": {
            "type": "string",
            "description": "Name"
          },
          "country_code": {
            "type": "string",
            "description": "Country code by ISO_3166-1 Alpha-2"
          },
          "iso3": {
            "type": "string",
            "description": "Country code by ISO_3166-1 Alpha-3"
          },
          "calling_code": {
            "type": "string",
            "description": "Country calling code"
          }
        },
        "description": "Country data"
      },
      "Blacklist": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Blacklist ID"
          },
          "type": {
            "type": "string",
            "description": "Type of calls",
            "enum": [
              "all",
              "incoming",
              "outgoing"
            ]
          },
          "public_number": {
            "type": "string",
            "description": "Blacklisted number in E.164 format"
          },
          "created": {
            "type": "string",
            "description": "Created date and time",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "description": "Last modified date and time",
            "format": "date-time"
          }
        },
        "description": "Blacklist data"
      },
      "CallTag": {
        "type": "array",
        "description": "Tags assigned to this call - can include multiple",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Tag ID"
            },
            "name": {
              "type": "string",
              "description": "Tag"
            }
          }
        }
      },
      "CallNote": {
        "type": "array",
        "description": "Notes assigned to this call",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Note ID"
            },
            "name": {
              "type": "string",
              "description": "Note"
            }
          }
        }
      },
      "CallRating": {
        "type": "array",
        "description": "Ratings assigned to this call",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Rating ID"
            },
            "type": {
              "type": "string",
              "description": "Type of person who added the rating",
              "enum": [
                "agent",
                "contact"
              ]
            },
            "rating": {
              "type": "integer",
              "description": "Rating value 1 to 5 (from worst to best)"
            }
          }
        }
      },
      "Sms": {
        "type": "object",
        "properties": {
          "recipient": {
            "type": "string",
            "description": "Recipient number in E.164 format. To send Whatsapp message include prefix \"whatsapp:+421...\" to both sender and recipient numbers."
          },
          "message": {
            "type": "string",
            "description": "Message body/content."
          },
          "sender": {
            "type": "string",
            "description": "Sender number in E.164 format. To send Whatsapp message include prefix \"whatsapp:+421...\" to both sender and recipient numbers."
          },
          "country_code": {
            "type": "string",
            "description": "Country code of recipient number."
          },
          "images_by_url": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Image to be send as MMS. Will be downloaded from URL. MAX 5MB. Can contain up to 5 urls."
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "binary"
            },
            "description": "Image sent as blob to be send as MMS. MAX 5MB. Can contain up to 5 images."
          },
          "file_by_url": {
            "type": "string",
            "description": "File to be send to Whatsapp. Will be downloaded from URL. MAX 16MB. To send Whatsapp message recipient and sender number must contain prefix \"whatsapp:\" example \"whatsapp:+421...\". Field message must be empty."
          },
          "file": {
            "type": "string",
            "format": "binary",
            "description": "File sent as blob to be send to Whatsapp. MAX 16MB. To send Whatsapp message recipient and sender number must contain prefix \"whatsapp:\" example \"whatsapp:+421...\". Field message must be empty."
          }
        },
        "description": "Sms data"
      },
      "CampaignList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Campaign ID"
          },
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "status": {
            "type": "string",
            "description": "Campaign status (active/inactive)"
          },
          "has_schedule_date": {
            "type": "boolean",
            "description": "Is campaign scheduled?"
          },
          "schedule_start_date": {
            "type": "string",
            "description": "Campaign start date",
            "format": "date"
          },
          "schedule_start_time": {
            "type": "string",
            "description": "Campaign start time",
            "format": "time"
          },
          "answer_wait_time": {
            "type": "integer",
            "description": "Maximum number of seconds we will wait for the call to be answered."
          },
          "after_call_dialing_auto": {
            "type": "boolean",
            "description": "Automatically dial next contact after a call ends true/false"
          },
          "after_call_time": {
            "type": "integer",
            "description": "After call time (in seconds)"
          },
          "is_recording": {
            "type": "boolean",
            "description": "Calls recording true/false"
          },
          "call_number_id": {
            "type": "integer",
            "description": "Outbound caller id"
          },
          "call_script_id": {
            "type": "integer",
            "description": "Call script ID"
          },
          "survey_id": {
            "type": "integer",
            "description": "Survey ID"
          },
          "is_predictive": {
            "type": "integer",
            "description": "Is predictive dialer campaign 0/1"
          },
          "calls_percentage": {
            "type": "integer",
            "description": "Agents utilization"
          },
          "attempts": {
            "type": "integer",
            "description": "Attempts per contact"
          },
          "attempts_interval": {
            "type": "integer",
            "description": "Hours between attempts"
          }
        },
        "description": "Campaign data"
      },
      "Button": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Button ID"
          },
          "title": {
            "type": "string",
            "description": "Button title"
          },
          "type": {
            "type": "string",
            "enum": [
              "successful_positive",
              "successful_negative",
              "rescheduled",
              "unsuccessful_call_again",
              "unsuccessful_do_not_call"
            ],
            "description": "Button type"
          },
          "color": {
            "type": "string",
            "description": "Button color (hex code)"
          },
          "description": {
            "type": "string",
            "description": "Button description"
          }
        },
        "description": "Campaign button"
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Tag ID"
          },
          "name": {
            "type": "string",
            "description": "Tag name"
          }
        },
        "description": "Campaign tag"
      },
      "PdAgent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Agent ID"
          },
          "fullname": {
            "type": "string",
            "description": "Agent name"
          }
        },
        "description": "Campaign agent"
      },
      "Group": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Group ID"
          },
          "internal_name": {
            "type": "string",
            "description": "Group name"
          }
        },
        "description": "Campaign group"
      },
      "ContactsBulkDataResponse": {
        "type": "array",
        "description": "Response data",
        "items": {
          "type": "object",
          "properties": {
            "command_id": {
              "$ref": "#/components/schemas/command_id"
            },
            "status": {
              "$ref": "#/components/schemas/StatusCode/properties/status"
            },
            "message": {
              "$ref": "#/components/schemas/ErrorInvalidData/properties/message"
            },
            "data": {
              "type": "object",
              "properties": {},
              "description": "Available only in add actions or invalid action data. More data explaining the error or id of new entity."
            }
          }
        }
      },
      "command_id": {
        "type": "string",
        "description": "Unique action identifier"
      },
      "ErrorData": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status code"
          },
          "message": {
            "type": "string",
            "description": "The error message"
          }
        }
      },
      "ErrorInvalidData": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status code"
          },
          "message": {
            "type": "string",
            "description": "The error message"
          },
          "data": {
            "type": "object",
            "properties": {},
            "description": "More data explaining the error"
          }
        }
      },
      "BinaryData": {
        "type": "string",
        "format": "binary"
      },
      "SuccessGeneralData": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status code"
          }
        }
      },
      "StatusCode": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status code"
          }
        }
      },
      "PaginationData": {
        "type": "object",
        "properties": {
          "itemsCount": {
            "type": "integer",
            "description": "number of resources in the response",
            "format": "int64"
          },
          "pageCount": {
            "type": "integer",
            "description": "number of pages found",
            "format": "int64"
          },
          "pageNumber": {
            "type": "integer",
            "description": "current page in the response",
            "format": "int64"
          },
          "limit": {
            "type": "integer",
            "description": "number of objects sent per page",
            "format": "int64"
          }
        },
        "description": "Call data"
      },
      "CallTimes": {
        "type": "object",
        "properties": {
          "total_time": {
            "type": "number",
            "nullable": true,
            "description": "Total time spent in a call"
          },
          "talking_time": {
            "type": "number",
            "nullable": true,
            "description": "Time spent talking to agent/customer"
          },
          "wrap_up_time": {
            "type": "number",
            "nullable": true,
            "description": "Time spent in wrap-up screen"
          },
          "ringing_time": {
            "type": "number",
            "nullable": true,
            "description": "Time spent ringing on an agent"
          },
          "waiting_time": {
            "type": "number",
            "nullable": true,
            "description": "Time from after leaving IVR to getting answered/missed by agent"
          }
        }
      },
      "ResolvedByCall": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "nullable": true,
            "description": "ID of a call that resolved this call"
          },
          "date": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the call was resolved"
          },
          "agent": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "nullable": true,
                "description": "ID of an agent that resolved this call"
              },
              "name": {
                "type": "string",
                "nullable": true,
                "description": "Name of an agent that resolved this call"
              }
            }
          }
        }
      },
      "AgentStep": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "agent"
            ]
          },
          "id": {
            "type": "number",
            "nullable": true,
            "description": "ID of an agent"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "Name of an agent"
          },
          "date": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the agent answered/missed the call"
          },
          "call_id": {
            "type": "number",
            "description": "ID of a call that was answered/missed by an agent"
          },
          "call_times": {
            "$ref": "#/components/schemas/CallTimes"
          },
          "group_ids": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "IDs of groups that the agent belongs to"
          },
          "status": {
            "type": "string",
            "enum": [
              "answered",
              "missed"
            ],
            "description": "Status of the agent call step"
          },
          "reason": {
            "type": "string",
            "enum": [
              "busy",
              "not_picked_up",
              "offline",
              "idle",
              "canceled"
            ],
            "description": "Reason why agent missed the call"
          },
          "resolved_by": {
            "type": "number",
            "nullable": true,
            "description": "ID of a call that resolved this call"
          },
          "resolved_by_call": {
            "$ref": "#/components/schemas/ResolvedByCall"
          }
        }
      },
      "QueueStep": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "queue"
            ]
          },
          "id": {
            "type": "number",
            "nullable": true,
            "description": "ID of a queue"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "Name of a queue"
          },
          "date": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the call was calling the queue"
          },
          "call_times": {
            "$ref": "#/components/schemas/CallTimes"
          },
          "status": {
            "type": "string",
            "enum": [
              "answered",
              "missed"
            ],
            "description": "Status of the queue call step"
          },
          "reason": {
            "type": "string",
            "enum": [
              "no_agents_online",
              "no_agents_available",
              "no_agents_picked_up",
              "canceled"
            ],
            "description": "Reason why the queue missed the call"
          },
          "resolved_by": {
            "type": "number",
            "nullable": true,
            "description": "ID of a call that resolved this call"
          },
          "resolved_by_call": {
            "$ref": "#/components/schemas/ResolvedByCall"
          },
          "strategy": {
            "type": "string",
            "enum": [
              "ringall",
              "rrmemory",
              "random"
            ],
            "description": "Strategy used by the queue"
          },
          "agent_calls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentStep"
            }
          }
        }
      },
      "IVRStep": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ivr"
            ]
          },
          "id": {
            "type": "number",
            "nullable": true,
            "description": "ID of an IVR"
          },
          "date": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the call was on the IVR step"
          },
          "total_time": {
            "type": "number",
            "nullable": true,
            "description": "Total time spent in IVR"
          },
          "option": {
            "type": "string",
            "nullable": true,
            "description": "Option pressed by the caller"
          }
        }
      },
      "PlaybackStep": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "playback"
            ]
          },
          "id": {
            "type": "number",
            "nullable": true,
            "description": "ID of a playback"
          },
          "date": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the call was on the playback step"
          },
          "file": {
            "type": "string",
            "nullable": true,
            "description": "File played"
          },
          "total_time": {
            "type": "number",
            "nullable": true,
            "description": "Total time spent in playback"
          }
        }
      },
      "TransferStep": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "transfer"
            ]
          },
          "id": {
            "type": "number",
            "nullable": true,
            "description": "ID of a transfer"
          },
          "date": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the call was on the transfer step"
          },
          "endpoint": {
            "type": "string",
            "nullable": true,
            "description": "Endpoint of the transfer"
          },
          "status": {
            "type": "string",
            "enum": [
              "answered",
              "missed"
            ],
            "description": "Status of the transfer call step"
          }
        }
      },
      "Call": {
        "type": "object",
        "properties": {
          "cdr_id": {
            "type": "number"
          },
          "uuid": {
            "type": "string"
          },
          "company_id": {
            "type": "number"
          },
          "date": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the call started"
          },
          "contact": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "nullable": true,
                "description": "ID of a contact"
              },
              "name": {
                "type": "string",
                "nullable": true,
                "description": "Name of a contact"
              },
              "country": {
                "type": "string",
                "nullable": true,
                "description": "Country of a contact"
              },
              "number": {
                "type": "string",
                "description": "Number of a contact"
              }
            }
          },
          "call_tags": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "nullable": true,
                  "description": "ID of a tag"
                },
                "label": {
                  "type": "string",
                  "nullable": true,
                  "description": "Label of a tag"
                }
              }
            }
          },
          "call_rating": {
            "type": "number",
            "nullable": true,
            "description": "Rating of a call"
          },
          "internal_number": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "nullable": true,
                "description": "ID of an internal number"
              },
              "name": {
                "type": "string",
                "nullable": true,
                "description": "Name of an internal number"
              },
              "number": {
                "type": "string",
                "description": "Phone number of an internal number"
              }
            }
          },
          "call_times": {
            "$ref": "#/components/schemas/CallTimes"
          },
          "direction": {
            "type": "string",
            "enum": [
              "incoming",
              "outgoing",
              "internal"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "power_dialer",
              "predictive_dialer",
              "callback",
              "redirected",
              "transferred",
              "regular"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "answered",
              "missed"
            ]
          },
          "call_steps": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/QueueStep"
                },
                {
                  "$ref": "#/components/schemas/AgentStep"
                },
                {
                  "$ref": "#/components/schemas/IVRStep"
                },
                {
                  "$ref": "#/components/schemas/PlaybackStep"
                },
                {
                  "$ref": "#/components/schemas/TransferStep"
                }
              ]
            },
            "description": "List of call steps"
          },
          "notes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "recorded": {
            "type": "boolean",
            "description": "Indicates if the call was recorded"
          },
          "out_of_office": {
            "type": "boolean",
            "description": "Indicates if the call was made in the out of office hours"
          }
        }
      }
    },
    "parameters": {
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "Max. number of items in response data.",
        "schema": {
          "maximum": 1000,
          "minimum": 1,
          "type": "integer"
        }
      },
      "page": {
        "name": "page",
        "in": "query",
        "description": "Number of page to return.",
        "schema": {
          "minimum": 1,
          "type": "integer"
        }
      },
      "callId": {
        "name": "callId",
        "in": "path",
        "required": true,
        "description": "Call ID",
        "schema": {
          "type": "number"
        }
      },
      "paginationLimit": {
        "name": "limit",
        "in": "query",
        "description": "Maximum number of items to return",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1
        }
      },
      "paginationOffset": {
        "name": "offset",
        "in": "query",
        "description": "Offset the list of returned items by this amount",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        }
      }
    }
  }
}
